{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA,uDAAiD;AAEjD,+EAA2C;AAGpC,IAAM,aAAa,GAAnB,MAAM,aAAa;IACxB,YAA6B,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAGvD,OAAO;QACL,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IACnC,CAAC;CACF;AAJC;IAAC,gBAAG,GAAE;;;;4CAGL;AANU,aAAa;IADzB,uBAAU,EAAC,EAAE,CAAC;yDAE4B,wBAAU,oBAAV,wBAAU;GADxC,aAAa,CAOzB;AAPY,sCAAa;;;;;;;;;;;;;;;;;;;;ACL1B,uDAAwC;AAExC,qFAAiD;AACjD,+EAA2C;AAC3C,2DAAkD;AAClD,oFAAiD;AACjD,oFAAgD;AAChD,2FAAuD;AACvD,6FAAyD;AACzD,iGAA6D;AAC7D,8FAA0D;AAenD,IAAM,SAAS,GAAf,MAAM,SAAS;IACpB;QACE,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC,CAAC;IACxD,CAAC;CACF;AAJY,SAAS;IAbrB,mBAAM,EAAC;QACN,OAAO,EAAE;YACP,yBAAc,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAE,CAAC;YACjE,yBAAW;YACX,wBAAU;YACV,4BAAY;YACZ,8BAAa;YACb,gCAAc;YACd,8BAAa;SACd;QACD,WAAW,EAAE,CAAC,8BAAa,CAAC;QAC5B,SAAS,EAAE,CAAC,wBAAU,CAAC;KACxB,CAAC;;GACW,SAAS,CAIrB;AAJY,8BAAS;;;;;;;;;;;;;;;;;ACzBtB,uDAA4C;AAGrC,IAAM,UAAU,GAAhB,MAAM,UAAU;IACrB,OAAO;QACL,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC;IACxC,CAAC;CACF;AAJY,UAAU;IADtB,uBAAU,GAAE;GACA,UAAU,CAItB;AAJY,gCAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHvB,uDAQwB;AACxB,iDAAmC;AACnC,sFAA6C;AAC7C,8EAAgD;AAGzC,IAAM,cAAc,GAApB,MAAM,cAAc;IACzB,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAG,CAAC;IAG1C,KAAK,CAAS,YAA0B,EAAS,GAAa;;YAClE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YAC/D,IAAI,IAAI,IAAI,IAAI,EAAE;gBAChB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,uBAAuB;iBAC/B,CAAC,CAAC;aACJ;YAED,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAClD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE;oBACN,QAAQ,EAAE,MAAM;oBAChB,MAAM,EAAE,IAAI,CAAC,GAAG;oBAChB,KAAK,EAAE,IAAI,CAAC,KAAK;iBAClB;aACF,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AAnBO;IADL,iBAAI,EAAC,QAAQ,CAAC;IACF,4BAAI,GAAE;IAA8B,2BAAG,GAAE;;yDAApB,uBAAY,oBAAZ,uBAAY,oDAAc,kBAAQ,oBAAR,kBAAQ;;2CAkBnE;AAtBU,cAAc;IAD1B,uBAAU,EAAC,MAAM,CAAC;yDAEgB,0BAAW,oBAAX,0BAAW;GADjC,cAAc,CAuB1B;AAvBY,wCAAc;;;;;;;;;;;;;;;;;ACd3B,uDAAwC;AACxC,oFAAkD;AAClD,sFAA6C;AAC7C,2DAAkD;AAClD,iDAAwC;AACxC,4FAAmD;AACnD,wFAAqD;AACrD,2DAAkD;AAClD,kFAAgD;AAChD,sFAA6C;AActC,IAAM,UAAU,GAAhB,MAAM,UAAU;CAAG;AAAb,UAAU;IAZtB,mBAAM,EAAC;QACN,OAAO,EAAE;YACP,yBAAW;YACX,yBAAc,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YAC1C,eAAS,CAAC,QAAQ,CAAC;gBACjB,MAAM,EAAE,cAAc;aACvB,CAAC;YACF,yBAAc,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,uBAAU,EAAE,CAAC,CAAC;SAClE;QACD,SAAS,EAAE,CAAC,0BAAW,EAAE,4BAAY,EAAE,0BAAW,CAAC;QACnD,WAAW,EAAE,CAAC,gCAAc,CAAC;KAC9B,CAAC;GACW,UAAU,CAAG;AAAb,gCAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBvB,uDAA4E;AAC5E,wFAAqD;AACrD,6CAAiC;AACjC,iDAAyC;AAKlC,IAAM,WAAW,GAAjB,MAAM,WAAW;IACtB,YACmB,WAAyB,EAClC,UAAsB;QADb,gBAAW,GAAX,WAAW,CAAc;QAClC,eAAU,GAAV,UAAU,CAAY;IAC7B,CAAC;IAEE,YAAY,CAAC,YAA0B;;YAC3C,eAAM,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;YAChD,eAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAEzB,MAAM,IAAI,GAAgB,MAAM,IAAI,CAAC,WAAW,CAAC,cAAc,CAC7D,YAAY,CAAC,KAAM,CACpB,CAAC;YACF,IAAI,CAAC,IAAI,EAAE;gBACT,eAAM,CAAC,GAAG,CACR,2CAA2C,GAAG,YAAY,CAAC,KAAK,GAAG,GAAG,CACvE,CAAC;gBACF,OAAO,IAAI,CAAC;aACb;YAED,eAAM,CAAC,GAAG,CACR,uCAAuC,GAAG,YAAY,CAAC,KAAK,GAAG,GAAG,CACnE,CAAC;YAEF,eAAM,CAAC,GAAG,CACR,uBAAuB;gBACrB,YAAY,CAAC,QAAQ;gBACrB,oBAAoB;gBACpB,IAAI,CAAC,QAAQ;gBACb,GAAG,CACN,CAAC;YAEF,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,OAAO,CACxC,YAAY,CAAC,QAAS,EACtB,IAAI,CAAC,QAAS,CACf,CAAC;YACF,IAAI,aAAa,EAAE;gBACjB,eAAM,CAAC,GAAG,CACR,uDAAuD;oBACrD,YAAY,CAAC,KAAK;oBAClB,GAAG,CACN,CAAC;gBAEF,OAAO,IAAI,CAAC;aACb;YAED,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAEK,KAAK,CAAC,IAAU;;YACpB,eAAM,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;YACzC,eAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAEjB,MAAM,OAAO,GAAG;gBACd,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,KAAK,EAAE,IAAI,CAAC,KAAK;aAClB,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/C,eAAM,CAAC,GAAG,CAAC,mCAAmC,GAAG,QAAQ,GAAG,GAAG,CAAC,CAAC;YAEjE,OAAO,QAAQ,CAAC;QAClB,CAAC;KAAA;CACF;AA/DY,WAAW;IADvB,uBAAU,GAAE;yDAGqB,4BAAY,oBAAZ,4BAAY,oDACtB,gBAAU,oBAAV,gBAAU;GAHrB,WAAW,CA+DvB;AA/DY,kCAAW;;;;;;;;;;;;;;;;;ACRxB,uDAA4C;AAC5C,2DAA6C;AAGtC,IAAM,YAAY,GAAlB,MAAM,YAAa,SAAQ,wBAAS,EAAC,KAAK,CAAC;CAAG;AAAxC,YAAY;IADxB,uBAAU,GAAE;GACA,YAAY,CAA4B;AAAxC,oCAAY;;;;;;;;;;;;;;;;;;;;ACJzB,2DAAoD;AACpD,2DAAoD;AAEpD,MAAa,WAAY,SAAQ,+BAAgB,EAAC,uBAAQ,CAAC;IACzD;QACE,KAAK,CAAC;YACJ,cAAc,EAAE,yBAAU,CAAC,2BAA2B,EAAE;YACxD,gBAAgB,EAAE,KAAK;YACvB,WAAW,EAAE,cAAc;SAC5B,CAAC,CAAC;IACL,CAAC;IAEK,QAAQ,CAAC,OAAY;;YACzB,OAAO;gBACL,GAAG,EAAE,OAAO,CAAC,GAAG;gBAChB,KAAK,EAAE,OAAO,CAAC,KAAK;aACrB,CAAC;QACJ,CAAC;KAAA;CACF;AAfD,kCAeC;;;;;;;;;;;;;;;;;;;;;AClBD,iEAMyB;AAEzB,MAAa,UAAU;CA6BtB;AA5BC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;IACV,+BAAS,GAAE;;4CAC0B;AAEtC;IAAC,gCAAU,GAAE;IACZ,kCAAY,GAAE;;4CACqB;AAEpC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;0CACyB;AAEpC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;8CAC6B;AAExC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;wCACuB;AAElC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;+CAC8B;AAEzC;IAAC,gCAAU,GAAE;IACZ,+BAAS,GAAE;;6CAC4B;AA5B1C,gCA6BC;;;;;;;;;;;;;;;;;;;;;ACrCD,2DAA+D;AAC/D,mDAAiC;AAK1B,IAAM,OAAO,GAAb,MAAM,OAAO;CA0BnB;AAvBC;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;;uCACjB;AAE3B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC;;uCACnB;AAE3B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;yCACI;AAE3B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;uCACE;AAE3B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;2CACM;AAE/B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;qCACA;AAEzB;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;4CACO;AAEhC;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;;0CACK;AAzBpB,OAAO;IADnB,qBAAM,GAAE;GACI,OAAO,CA0BnB;AA1BY,0BAAO;AA4BP,qBAAa,GAAG,wBAAa,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;;;;;;;;;;;;;;;;;AClCnE,uDAAwC;AACxC,2DAAkD;AAClD,yFAAuD;AACvD,+FAA4D;AAC5D,2FAAgD;AAChD,uGAA2D;AAC3D,iGAAqD;AAU9C,IAAM,aAAa,GAAnB,MAAM,aAAa;CAAG;AAAhB,aAAa;IARzB,mBAAM,EAAC;QACN,OAAO,EAAE;YACP,yBAAc,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,6BAAa,EAAE,CAAC,CAAC;YACvE,yBAAc,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,2BAAY,EAAE,CAAC,CAAC;SACtE;QACD,SAAS,EAAE,CAAC,kCAAe,EAAE,gCAAc,CAAC;QAC5C,WAAW,EAAE,CAAC,wCAAkB,CAAC;KAClC,CAAC;GACW,aAAa,CAAG;AAAhB,sCAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChB1B,uDAYwB;AACxB,iDAAmC;AACnC,0FAAsD;AACtD,+FAA4D;AAC5D,oHAA+E;AAC/E,wFAAqD;AACrD,uFAA2C;AAC3C,iGAAqD;AAG9C,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAC7B,YAAoB,eAAgC,EAAU,cAA8B;QAAxE,oBAAe,GAAf,eAAe,CAAiB;QAAU,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAI1F,UAAU,CACN,UAAsB,EACvB,GAA4B,EAC5B,GAAa;;YAEpB,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,eAAM,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;YACzD,eAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAEvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,UAAU,CAAC,QAAS,CAAC,CAAC;YAC7E,IAAI,CAAC,MAAM,EAAE;gBACX,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,mBAAmB,GAAG,UAAU,CAAC,QAAQ,GAAG,aAAa;iBACjE,CAAC;aACH;YAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,CACnD,UAAU,EACV,SAAS,CACV,CAAC;YACF,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,OAAO;aAChB,CAAC,CAAC;QACL,CAAC;KAAA;IAGK,cAAc,CAAQ,GAAa;;YACvC,eAAM,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;YAExD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC;YAE7D,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,QAAQ;aACjB,CAAC,CAAC;QACL,CAAC;KAAA;IAGK,cAAc,CAAc,EAAU,EAAS,GAAa;;YAChE,eAAM,CAAC,GAAG,CAAC,qCAAqC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YAEnE,IAAI,CAAC,0BAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oCAAoC;iBAC5C,CAAC,CAAC;aACJ;YAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAC9D,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oBAAoB,GAAG,EAAE,GAAG,aAAa;iBACjD,CAAC,CAAC;aACJ;YAED,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,OAAO;aAChB,CAAC,CAAC;QACL,CAAC;KAAA;IAGK,oBAAoB,CACX,QAAgB,EACtB,GAAa;;YAEpB,eAAM,CAAC,GAAG,CACR,4CAA4C,GAAG,QAAQ,GAAG,SAAS,CACpE,CAAC;YAEF,IAAI,CAAC,0BAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;gBACnC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,0CAA0C;iBAClD,CAAC,CAAC;aACJ;YAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;YAC1E,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,0BAA0B,GAAG,QAAQ,GAAG,aAAa;iBAC7D,CAAC,CAAC;aACJ;YAED,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,KAAK,EAAE,OAAO;aACf,CAAC,CAAC;QACL,CAAC;KAAA;IAIK,aAAa,CACJ,EAAU,EACf,UAAsB,EACvB,GAA4B,EAC5B,GAAa;;YAEpB,eAAM,CAAC,GAAG,CAAC,qCAAqC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YAEnE,IAAI,CAAC,0BAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oCAAoC;iBAC5C,CAAC,CAAC;aACJ;YAED,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAClE,IAAI,CAAC,WAAW,EAAE;gBAChB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oBAAoB,GAAG,EAAE,GAAG,aAAa;iBACjD,CAAC,CAAC;aACJ;YAED,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,UAAU,CAAC,QAAS,CAAC,CAAC;YAC7E,IAAI,CAAC,MAAM,EAAE;gBACX,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,mBAAmB,GAAG,UAAU,CAAC,QAAQ,GAAG,aAAa;iBACjE,CAAC;aACH;YAED,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,IAAI,SAAS,IAAI,WAAW,CAAC,MAAM,EAAE;gBACnC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,kDAAkD;iBAC1D,CAAC,CAAC;aACJ;YAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,aAAa,CACtD,EAAE,EACF,SAAS,EACT,UAAU,CACX,CAAC;YACF,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,OAAO;aAChB,CAAC,CAAC;QACL,CAAC;KAAA;IAIK,iBAAiB,CACR,EAAU,EAChB,GAA4B,EAC5B,GAAa;;YAEpB,eAAM,CAAC,GAAG,CAAC,wCAAwC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YAEtE,IAAI,CAAC,0BAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oCAAoC;iBAC5C,CAAC,CAAC;aACJ;YAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAC9D,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oBAAoB,GAAG,EAAE,GAAG,aAAa;iBACjD,CAAC,CAAC;aACJ;YAED,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,IAAI,SAAS,IAAI,OAAO,CAAC,MAAM,EAAE;gBAC/B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,kDAAkD;iBAC1D,CAAC,CAAC;aACJ;YAED,MAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACjD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,OAAO,EAAE,oBAAoB,GAAG,EAAE,GAAG,WAAW;aACjD,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AAxLO;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,iBAAI,GAAE;IAEJ,4BAAI,GAAE;IACN,2BAAG,GAAE;IACL,2BAAG,GAAE;;yDAFc,wBAAU,oBAAV,wBAAU,oDAClB,oDAAuB,oBAAvB,oDAAuB,oDACvB,kBAAQ,oBAAR,kBAAQ;;oDAsBrB;AAGK;IADL,gBAAG,GAAE;IACgB,2BAAG,GAAE;;yDAAM,kBAAQ,oBAAR,kBAAQ;;wDASxC;AAGK;IADL,gBAAG,EAAC,KAAK,CAAC;IACW,6BAAK,EAAC,IAAI,CAAC;IAAc,2BAAG,GAAE;;iEAAM,kBAAQ,oBAAR,kBAAQ;;wDAsBjE;AAGK;IADL,gBAAG,EAAC,aAAa,CAAC;IAEhB,6BAAK,EAAC,IAAI,CAAC;IACX,2BAAG,GAAE;;iEAAM,kBAAQ,oBAAR,kBAAQ;;8DAyBrB;AAIK;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,gBAAG,EAAC,KAAK,CAAC;IAER,6BAAK,EAAC,IAAI,CAAC;IACX,4BAAI,GAAE;IACN,2BAAG,GAAE;IACL,2BAAG,GAAE;;iEAFc,wBAAU,oBAAV,wBAAU,oDAClB,oDAAuB,oBAAvB,oDAAuB,oDACvB,kBAAQ,oBAAR,kBAAQ;;uDA4CrB;AAIK;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,mBAAM,EAAC,KAAK,CAAC;IAEX,6BAAK,EAAC,IAAI,CAAC;IACX,2BAAG,GAAE;IACL,2BAAG,GAAE;;iEADM,oDAAuB,oBAAvB,oDAAuB,oDACvB,kBAAQ,oBAAR,kBAAQ;;2DAgCrB;AA5LU,kBAAkB;IAD9B,uBAAU,EAAC,UAAU,CAAC;yDAEgB,kCAAe,oBAAf,kCAAe,oDAA0B,gCAAc,oBAAd,gCAAc;GADjF,kBAAkB,CA6L9B;AA7LY,gDAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtB/B,uDAAoD;AACpD,2DAA+C;AAC/C,mDAAwC;AAKjC,IAAM,eAAe,GAArB,MAAM,eAAe;IAC1B,YAEmB,YAAoC;QAApC,iBAAY,GAAZ,YAAY,CAAwB;IACpD,CAAC;IAEE,UAAU,CAAC,UAAsB,EAAE,MAAc;;YACrD,eAAM,CAAC,GAAG,CACR,oDAAoD,GAAG,MAAM,GAAG,GAAG,CACpE,CAAC;YACF,eAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAEvB,MAAM,OAAO,mBACX,MAAM,EACN,MAAM,EAAE,UAAU,CAAC,QAAQ,IACxB,UAAU,CACd,CAAC;YAEF,OAAO,MAAM,CACX,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CACxC,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QACnC,CAAC;KAAA;IAEK,cAAc;;YAClB,eAAM,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;YAEtD,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QACzE,CAAC;KAAA;IAEK,cAAc,CAAC,GAAW;;YAC9B,eAAM,CAAC,GAAG,CAAC,mCAAmC,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC;YAEnE,OAAO,MAAM,IAAI,CAAC,YAAY;iBAC3B,QAAQ,CAAC,EAAE,GAAG,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;iBAC1C,QAAQ,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;QAChD,CAAC;KAAA;IAEK,oBAAoB,CAAC,QAAgB;;YACzC,eAAM,CAAC,GAAG,CACR,yCAAyC,GAAG,QAAQ,GAAG,UAAU,CAClE,CAAC;YAEF,OAAO,MAAM,IAAI,CAAC,YAAY;iBAC3B,OAAO,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;iBAC/B,QAAQ,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QACpC,CAAC;KAAA;IAEK,aAAa,CACjB,GAAW,EACX,MAAc,EACd,UAAsB;;YAEtB,eAAM,CAAC,GAAG,CACR,kCAAkC;gBAChC,GAAG;gBACH,yBAAyB;gBACzB,MAAM;gBACN,GAAG,CACN,CAAC;YACF,eAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAEvB,MAAM,OAAO,mBACX,GAAG;gBACH,MAAM,IACH,UAAU,CACd,CAAC;YAEF,OAAO,MAAM,IAAI,CAAC,YAAY;iBAC3B,gBAAgB,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,OAAO,EAAE;gBACvC,GAAG,EAAE,IAAI;aACV,CAAC;iBACD,QAAQ,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QACpC,CAAC;KAAA;IAEK,iBAAiB,CAAC,GAAW;;YACjC,eAAM,CAAC,GAAG,CAAC,sCAAsC,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC;YAEtE,OAAO,MAAM,IAAI,CAAC,YAAY;iBAC3B,gBAAgB,CAAC;gBAChB,GAAG,EAAE,GAAG;aACT,CAAC;iBACD,QAAQ,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QACpC,CAAC;KAAA;CACF;AAnFY,eAAe;IAD3B,uBAAU,GAAE;IAGR,qCAAW,EAAC,SAAS,CAAC;yDACQ,gBAAK,oBAAL,gBAAK;GAH3B,eAAe,CAmF3B;AAnFY,0CAAe;;;;;;;;;;;;;;;;;;;;ACP5B,iEAA4E;AAE5E,MAAa,WAAW;CAcvB;AAbC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;IACV,+BAAS,GAAE;;8CAC2B;AAEvC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;gDAC8B;AAEzC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;IACV,8BAAQ,GAAE;;gDAC8B;AAb3C,kCAcC;;;;;;;;;;;;;;;;;;;;AChBD,2DAA+D;AAC/D,mDAAiC;AAM1B,IAAM,QAAQ,GAAd,MAAM,QAAQ;CAiBpB;AAdC;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;;wCACjB;AAE3B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC;;2CACjB;AAE9B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;6CACO;AAEhC;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;6CACO;AAEhC;IAAC,mBAAI,EAAC,EAAE,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;;0CACA;AAhBrB,QAAQ;IADpB,qBAAM,GAAE;GACI,QAAQ,CAiBpB;AAjBY,4BAAQ;AAmBR,sBAAc,GAAG,wBAAa,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;;;;;;;;;;;;;;;;;AC1BrE,uDAAwC;AACxC,2DAAkD;AAClD,+FAAkD;AAClD,2GAA6D;AAC7D,qGAAuD;AACvD,2DAAiC;AAuB1B,IAAM,cAAc,GAApB,MAAM,cAAc;CAAG;AAAjB,cAAc;IArB1B,mBAAM,EAAC;QACN,OAAO,EAAE;YACP,yBAAc,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,+BAAc,EAAE,CAAC,CAAC;SAC1E;QACD,SAAS,EAAE;YACT,oCAAgB;YAChB;gBACE,OAAO,EAAE,OAAO;gBAChB,UAAU,EAAE,GAAG,EAAE;oBACf,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAE,CAAC;oBAC3C,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAE,CAAC;oBACjD,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAE,CAAC;oBACrD,OAAO,sBAAK,CAAC,MAAM,CACjB,QAAQ,EACR,sBAAK,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,aAAa,CAAC,CAC3C,CAAC;gBACJ,CAAC;aACF;SACF;QACD,WAAW,EAAE,CAAC,0CAAmB,CAAC;KACnC,CAAC;GACW,cAAc,CAAG;AAAjB,wCAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5B3B,uDAYwB;AACxB,iDAAmC;AAEnC,0FAAsD;AACtD,oHAA+E;AAC/E,wFAAqD;AACrD,2FAA6C;AAC7C,qGAAuD;AAGhD,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;IAC9B,YAAoB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;IAAG,CAAC;IAIpD,WAAW,CACP,WAAwB,EACzB,GAA4B,EAC5B,GAAa;;YAEpB,eAAM,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;YAC3D,eAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAExB,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,WAAW,CACtD,WAAW,EACX,SAAS,CACV,CAAC;YAEF,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,QAAQ;aACjB,CAAC,CAAC;QACL,CAAC;KAAA;IAGK,eAAe,CAAQ,GAAa;;YACxC,eAAM,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;YAE1D,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,CAAC;YAEhE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,SAAS;aAClB,CAAC,CAAC;QACL,CAAC;KAAA;IAGK,eAAe,CAAc,EAAU,EAAS,GAAa;;YACjE,eAAM,CAAC,GAAG,CAAC,uCAAuC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YAErE,IAAI,CAAC,0BAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oCAAoC;iBAC5C,CAAC,CAAC;aACJ;YAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YACjE,IAAI,CAAC,QAAQ,EAAE;gBACb,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,qBAAqB,GAAG,EAAE,GAAG,aAAa;iBAClD,CAAC,CAAC;aACJ;YAED,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,QAAQ;aACjB,CAAC,CAAC;QACL,CAAC;KAAA;IAGK,kBAAkB,CAAc,EAAU,EAAS,GAAa;;YACpE,eAAM,CAAC,GAAG,CACR,uCAAuC,GAAG,EAAE,GAAG,yBAAyB,CACzE,CAAC;YAEF,IAAI,CAAC,0BAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oCAAoC;iBAC5C,CAAC,CAAC;aACJ;YAED,MAAM,eAAe,GACnB,MAAM,IAAI,CAAC,gBAAgB,CAAC,iCAAiC,CAAC,EAAE,CAAC,CAAC;YACpE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,eAAe;aACxB,CAAC,CAAC;QACL,CAAC;KAAA;IAGK,sBAAsB,CAAc,EAAU,EAAS,GAAa;;YACxE,eAAM,CAAC,GAAG,CAAC,4CAA4C,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YAE1E,IAAI,CAAC,0BAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oCAAoC;iBAC5C,CAAC,CAAC;aACJ;YAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC;YAC1E,IAAI,CAAC,QAAQ,EAAE;gBACb,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,4BAA4B,GAAG,EAAE,GAAG,aAAa;iBACzD,CAAC,CAAC;aACJ;YAED,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,QAAQ;aACjB,CAAC,CAAC;QACL,CAAC;KAAA;IAIK,cAAc,CACL,EAAU,EACf,WAAwB,EACzB,GAA4B,EAC5B,GAAa;;YAEpB,eAAM,CAAC,GAAG,CAAC,uCAAuC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YACrE,eAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAExB,IAAI,CAAC,0BAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oCAAoC;iBAC5C,CAAC,CAAC;aACJ;YAED,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YACrE,IAAI,CAAC,YAAY,EAAE;gBACjB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,qBAAqB,GAAG,EAAE,GAAG,aAAa;iBAClD,CAAC,CAAC;aACJ;YAED,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,IAAI,SAAS,IAAI,YAAY,CAAC,MAAM,EAAE;gBACpC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,mDAAmD;iBAC3D,CAAC,CAAC;aACJ;YAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,cAAc,CACzD,EAAE,EACF,SAAS,EACT,WAAW,CACZ,CAAC;YACF,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,QAAQ;aACjB,CAAC,CAAC;QACL,CAAC;KAAA;IAIK,kBAAkB,CACT,EAAU,EAChB,GAA4B,EAC5B,GAAa;;YAEpB,eAAM,CAAC,GAAG,CAAC,uCAAuC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YAErE,IAAI,CAAC,0BAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oCAAoC;iBAC5C,CAAC,CAAC;aACJ;YAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAChE,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,qBAAqB,GAAG,EAAE,GAAG,aAAa;iBAClD,CAAC,CAAC;aACJ;YAED,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,IAAI,SAAS,IAAI,OAAO,CAAC,MAAM,EAAE;gBAC/B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,mDAAmD;iBAC3D,CAAC,CAAC;aACJ;YAED,MAAM,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;YACnD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,OAAO,EAAE,qBAAqB,GAAG,EAAE,GAAG,WAAW;aAClD,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AA1LO;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,iBAAI,GAAE;IAEJ,4BAAI,GAAE;IACN,2BAAG,GAAE;IACL,2BAAG,GAAE;;yDAFe,0BAAW,oBAAX,0BAAW,oDACpB,oDAAuB,oBAAvB,oDAAuB,oDACvB,kBAAQ,oBAAR,kBAAQ;;sDAerB;AAGK;IADL,gBAAG,GAAE;IACiB,2BAAG,GAAE;;yDAAM,kBAAQ,oBAAR,kBAAQ;;0DASzC;AAGK;IADL,gBAAG,EAAC,KAAK,CAAC;IACY,6BAAK,EAAC,IAAI,CAAC;IAAc,2BAAG,GAAE;;iEAAM,kBAAQ,oBAAR,kBAAQ;;0DAsBlE;AAGK;IADL,gBAAG,EAAC,qBAAqB,CAAC;IACD,6BAAK,EAAC,IAAI,CAAC;IAAc,2BAAG,GAAE;;iEAAM,kBAAQ,oBAAR,kBAAQ;;6DAkBrE;AAGK;IADL,gBAAG,EAAC,cAAc,CAAC;IACU,6BAAK,EAAC,IAAI,CAAC;IAAc,2BAAG,GAAE;;iEAAM,kBAAQ,oBAAR,kBAAQ;;iEAsBzE;AAIK;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,gBAAG,EAAC,KAAK,CAAC;IAER,6BAAK,EAAC,IAAI,CAAC;IACX,4BAAI,GAAE;IACN,2BAAG,GAAE;IACL,2BAAG,GAAE;;iEAFe,0BAAW,oBAAX,0BAAW,oDACpB,oDAAuB,oBAAvB,oDAAuB,oDACvB,kBAAQ,oBAAR,kBAAQ;;yDAqCrB;AAIK;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,mBAAM,EAAC,KAAK,CAAC;IAEX,6BAAK,EAAC,IAAI,CAAC;IACX,2BAAG,GAAE;IACL,2BAAG,GAAE;;iEADM,oDAAuB,oBAAvB,oDAAuB,oDACvB,kBAAQ,oBAAR,kBAAQ;;6DAgCrB;AA9LU,mBAAmB;IAD/B,uBAAU,EAAC,WAAW,CAAC;yDAEgB,oCAAgB,oBAAhB,oCAAgB;GAD3C,mBAAmB,CA+L/B;AA/LY,kDAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBhC,uDAA4D;AAC5D,2DAA+C;AAC/C,mDAAwC;AAGxC,2DAAsC;AAG/B,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAC3B,YACoC,WAAmB,EAEpC,aAAsC;QAFrB,gBAAW,GAAX,WAAW,CAAQ;QAEpC,kBAAa,GAAb,aAAa,CAAyB;IACtD,CAAC;IAEE,WAAW,CACf,WAAwB,EACxB,MAAc;;YAEd,eAAM,CAAC,GAAG,CACR,sDAAsD,GAAG,MAAM,GAAG,GAAG,CACtE,CAAC;YACF,eAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAExB,MAAM,QAAQ,mBACZ,MAAM,IACH,WAAW,CACf,CAAC;YAEF,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACnD,CAAC;KAAA;IAEK,eAAe;;YACnB,eAAM,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;YAExD,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3C,CAAC;KAAA;IAEK,iCAAiC,CACrC,UAAkB;;YAElB,eAAM,CAAC,GAAG,CACR,uDAAuD;gBACrD,UAAU;gBACV,UAAU,CACb,CAAC;YAEF,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;YAE3C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAC9B;;;;;;;KAOD,EACC,EAAE,UAAU,EAAE,CACf,CAAC;YAEF,OAAO,CAAC,KAAK,EAAE,CAAC;YAEhB,OAAO,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;QAClE,CAAC;KAAA;IAEK,eAAe,CAAC,GAAW;;YAC/B,eAAM,CAAC,GAAG,CAAC,qCAAqC,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC;YAErE,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC7E,CAAC;KAAA;IAEK,wBAAwB,CAAC,SAAiB;;YAC9C,eAAM,CAAC,GAAG,CACR,8CAA8C,GAAG,SAAS,GAAG,UAAU,CACxE,CAAC;YAEF,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;QACpE,CAAC;KAAA;IAEK,cAAc,CAClB,GAAW,EACX,MAAc,EACd,WAAwB;;YAExB,eAAM,CAAC,GAAG,CACR,oCAAoC;gBAClC,GAAG;gBACH,yBAAyB;gBACzB,MAAM;gBACN,GAAG,CACN,CAAC;YACF,eAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAExB,MAAM,QAAQ,mBACZ,MAAM,IACH,WAAW,CACf,CAAC;YAEF,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,QAAQ,EAAE;gBACvE,GAAG,EAAE,IAAI;aACV,CAAC,CAAC;QACL,CAAC;KAAA;IAEK,kBAAkB,CAAC,GAAW;;YAClC,eAAM,CAAC,GAAG,CAAC,wCAAwC,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC;YAExE,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;QACjE,CAAC;KAAA;CACF;AArGY,gBAAgB;IAD5B,uBAAU,GAAE;IAGR,8BAAM,EAAC,OAAO,CAAC;IACf,qCAAW,EAAC,UAAU,CAAC;yDADuB,qBAAM,oBAAN,qBAAM,oDAErB,gBAAK,oBAAL,gBAAK;GAJ5B,gBAAgB,CAqG5B;AArGY,4CAAgB;;;;;;;;;;;;;;;;;;;;;ACR7B,iEAQyB;AAEzB,MAAa,UAAU;CAwBtB;AAvBC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;IACV,+BAAS,GAAE;;8CAC4B;AAExC;IAAC,gCAAU,GAAE;IACZ,kCAAY,GAAE;;4CACqB;AAEpC;IAAC,8BAAQ,GAAE;;yCACwB;AAEnC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;2CAC0B;AAErC;IAAC,8BAAQ,GAAE;IACV,8BAAQ,GAAE;;+CAC8B;AAEzC;IAAC,gCAAU,GAAE;IACZ,+BAAS,GAAE;;4CAC2B;AAvBzC,gCAwBC;AAED,MAAa,iBAAiB;CAS7B;AARC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;8CACsB;AAEjC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;IACV,+BAAS,GAAE;;qDAC4B;AAR1C,8CASC;;;;;;;;;;;;;;;;;;;;;AC7CD,2DAA+D;AAC/D,mDAAiC;AAK1B,IAAM,OAAO,GAAb,MAAM,OAAO;CAwBnB;AAvBC;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;oCACD;AAExB;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;;uCACjB;AAE3B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC;;2CACjB;AAE/B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;yCACI;AAE3B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;sCACC;AAE1B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;wCACG;AAE5B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;4CACO;AAEhC;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;;yCACI;AAvBnB,OAAO;IADnB,qBAAM,GAAE;GACI,OAAO,CAwBnB;AAxBY,0BAAO;AA0BP,qBAAa,GAAG,wBAAa,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;;;;;;;;;;;;;;;;;AChCnE,uDAAwC;AACxC,2DAAkD;AAClD,+FAA6D;AAC7D,qGAAkE;AAClE,4FAAgD;AAChD,wGAA2D;AAC3D,kGAAqD;AACrD,2DAAiC;AA2B1B,IAAM,aAAa,GAAnB,MAAM,aAAa;CAAG;AAAhB,aAAa;IAzBzB,mBAAM,EAAC;QACN,OAAO,EAAE;YACP,yBAAc,CAAC,UAAU,CAAC;gBACxB,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,6BAAa,EAAE;gBAC1C,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,+BAAc,EAAE;aAC7C,CAAC;SACH;QACD,SAAS,EAAE;YACT,kCAAe;YACf,oCAAgB;YAChB;gBACE,OAAO,EAAE,OAAO;gBAChB,UAAU,EAAE,GAAG,EAAE;oBACf,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAE,CAAC;oBAC3C,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAE,CAAC;oBACjD,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAE,CAAC;oBACrD,OAAO,sBAAK,CAAC,MAAM,CACjB,QAAQ,EACR,sBAAK,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,aAAa,CAAC,CAC3C,CAAC;gBACJ,CAAC;aACF;SACF;QACD,WAAW,EAAE,CAAC,wCAAkB,CAAC;KAClC,CAAC;GACW,aAAa,CAAG;AAAhB,sCAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClC1B,uDAYwB;AACxB,iDAAmC;AACnC,0FAAsD;AACtD,qGAAkE;AAClE,oHAA+E;AAE/E,wFAA8D;AAC9D,kGAAqD;AAG9C,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAC7B,YACU,eAAgC,EAChC,gBAAkC;QADlC,oBAAe,GAAf,eAAe,CAAiB;QAChC,qBAAgB,GAAhB,gBAAgB,CAAkB;IACzC,CAAC;IAIE,oBAAoB,CAChB,UAAsB,EACvB,GAA4B,EAC5B,GAAa;;YAEpB,eAAM,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;YACzD,eAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAEvB,MAAM,UAAU,GAAG,UAAU,CAAC,UAAW,CAAC;YAC1C,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YACnE,IAAI,CAAC,QAAQ,EAAE;gBACb,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,qBAAqB,GAAG,UAAU,GAAG,aAAa;iBAC1D,CAAC,CAAC;aACJ;YAED,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAC7D,UAAU,EACV,SAAS,CACV,CAAC;YACF,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,OAAO;aAChB,CAAC,CAAC;QACL,CAAC;KAAA;IAGK,wBAAwB,CACf,EAAU,EAChB,GAAa;;YAEpB,eAAM,CAAC,GAAG,CAAC,8CAA8C,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YAE5E,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,4BAA4B,CACtE,EAAE,CACH,CAAC;YACF,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,QAAQ;aACjB,CAAC,CAAC;QACL,CAAC;KAAA;IAGK,UAAU,CACN,iBAAoC,EACrC,GAAa;;YAEpB,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,iBAAkB,CAAC;YAE/C,eAAM,CAAC,GAAG,CAAC,kCAAkC,GAAG,GAAG,GAAG,SAAS,CAAC,CAAC;YAEjE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CACvD,UAAW,EACX,GAAI,CACL,CAAC;YACF,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,OAAO,EAAE,oBAAoB,GAAG,GAAG,GAAG,aAAa;iBACpD,CAAC,CAAC;aACJ;YAED,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,OAAO;aAChB,CAAC,CAAC;QACL,CAAC;KAAA;IAIK,aAAa,CACJ,EAAU,EACf,UAAsB,EACvB,GAA4B,EAC5B,GAAa;;YAEpB,MAAM,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC;YACzC,eAAM,CAAC,GAAG,CAAC,qCAAqC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YACnE,eAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAEvB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAC5D,UAAW,EACX,EAAE,CACH,CAAC;YACF,IAAI,CAAC,YAAY,EAAE;gBACjB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EACH,oBAAoB;wBACpB,EAAE;wBACF,8BAA8B;wBAC9B,UAAU;wBACV,GAAG;iBACN,CAAC,CAAC;aACJ;YAED,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,IAAI,SAAS,IAAI,YAAY,CAAC,MAAM,EAAE;gBACpC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,kDAAkD;iBAC1D,CAAC,CAAC;aACJ;YAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,aAAa,CACtD,UAAW,EACX,EAAE,EACF,SAAS,EACT,UAAU,CACX,CAAC;YACF,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,OAAO;aAChB,CAAC,CAAC;QACL,CAAC;KAAA;IAIK,iBAAiB,CACb,iBAAoC,EACrC,GAA4B,EAC5B,GAAa;;YAEpB,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,iBAAiB,CAAC;YAC9C,eAAM,CAAC,GAAG,CAAC,qCAAqC,GAAG,GAAG,GAAG,SAAS,CAAC,CAAC;YAEpE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CACvD,UAAW,EACX,GAAI,CACL,CAAC;YACF,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oBAAoB,GAAG,GAAG,GAAG,aAAa;iBAClD,CAAC,CAAC;aACJ;YAED,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,IAAI,SAAS,IAAI,OAAO,CAAC,MAAM,EAAE;gBAC/B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,kDAAkD;iBAC1D,CAAC,CAAC;aACJ;YAED,MAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,UAAW,EAAE,GAAI,CAAC,CAAC;YAChE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,OAAO,EAAE,oBAAoB,GAAG,GAAG,GAAG,WAAW;aAClD,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AAzJO;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,iBAAI,GAAE;IAEJ,4BAAI,GAAE;IACN,2BAAG,GAAE;IACL,2BAAG,GAAE;;yDAFc,wBAAU,oBAAV,wBAAU,oDAClB,oDAAuB,oBAAvB,oDAAuB,oDACvB,kBAAQ,oBAAR,kBAAQ;;8DAuBrB;AAGK;IADL,gBAAG,EAAC,eAAe,CAAC;IAElB,6BAAK,EAAC,IAAI,CAAC;IACX,2BAAG,GAAE;;iEAAM,kBAAQ,oBAAR,kBAAQ;;kEAWrB;AAGK;IADL,gBAAG,GAAE;IAEH,4BAAI,GAAE;IACN,2BAAG,GAAE;;yDADqB,+BAAiB,oBAAjB,+BAAiB,oDAChC,kBAAQ,oBAAR,kBAAQ;;oDAqBrB;AAIK;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,gBAAG,EAAC,KAAK,CAAC;IAER,6BAAK,EAAC,IAAI,CAAC;IACX,4BAAI,GAAE;IACN,2BAAG,GAAE;IACL,2BAAG,GAAE;;iEAFc,wBAAU,oBAAV,wBAAU,oDAClB,oDAAuB,oBAAvB,oDAAuB,oDACvB,kBAAQ,oBAAR,kBAAQ;;uDAwCrB;AAIK;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,mBAAM,GAAE;IAEN,4BAAI,GAAE;IACN,2BAAG,GAAE;IACL,2BAAG,GAAE;;yDAFqB,+BAAiB,oBAAjB,+BAAiB,oDAChC,oDAAuB,oBAAvB,oDAAuB,oDACvB,kBAAQ,oBAAR,kBAAQ;;2DA6BrB;AAhKU,kBAAkB;IAD9B,uBAAU,EAAC,UAAU,CAAC;yDAGM,kCAAe,oBAAf,kCAAe,oDACd,oCAAgB,oBAAhB,oCAAgB;GAHjC,kBAAkB,CAiK9B;AAjKY,gDAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtB/B,uDAA+E;AAC/E,2DAA+C;AAC/C,mDAAwC;AAIxC,2DAAsC;AAG/B,IAAM,eAAe,GAArB,MAAM,eAAe;IAC1B,YACoC,WAAmB,EAEpC,YAAoC,EAEpC,aAAsC;QAJrB,gBAAW,GAAX,WAAW,CAAQ;QAEpC,iBAAY,GAAZ,YAAY,CAAwB;QAEpC,kBAAa,GAAb,aAAa,CAAyB;IACtD,CAAC;IAEE,oBAAoB,CACxB,UAAsB,EACtB,MAAc;;YAEd,eAAM,CAAC,GAAG,CACR,oDAAoD,GAAG,MAAM,GAAG,GAAG,CACpE,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;gBACjD,GAAG,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC;aAC/C,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ;gBAAE,MAAM,IAAI,0BAAiB,EAAE,CAAC;YAE7C,MAAM,OAAO,mBACX,GAAG,EAAE,QAAS,CAAC,QAAS,CAAC,MAAM,EAC/B,MAAM,IACH,UAAU,CACd,CAAC;YAEF,QAAS,CAAC,QAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAClC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEtB,6EAA6E;YAC7E,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;YAC3C,MAAM,OAAO,CAAC,GAAG,CACf;;;;OAIC,EACD;gBACE,MAAM;gBACN,UAAU,EAAE,QAAQ,CAAC,EAAE;aACxB,CACF,CAAC;YACF,OAAO,CAAC,KAAK,EAAE,CAAC;YAEhB,eAAM,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;YAEjD,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;IAEK,4BAA4B,CAAC,UAAkB;;YACnD,eAAM,CAAC,GAAG,CACR,iDAAiD;gBAC/C,UAAU;gBACV,UAAU,CACb,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;gBACjD,GAAG,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,UAAU,CAAC;aACpC,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ;gBAAE,MAAM,IAAI,0BAAiB,EAAE,CAAC;YAE7C,OAAO,QAAS,CAAC,QAAS,CAAC;QAC7B,CAAC;KAAA;IAEK,cAAc,CAClB,UAAkB,EAClB,GAAW;;YAEX,eAAM,CAAC,GAAG,CACR,mCAAmC;gBACjC,GAAG;gBACH,6BAA6B;gBAC7B,UAAU;gBACV,GAAG,CACN,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;gBACjD,GAAG,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,UAAU,CAAC;aACpC,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ;gBACX,MAAM,IAAI,0BAAiB,CACzB,qBAAqB,GAAG,UAAU,GAAG,aAAa,CACnD,CAAC;YAEJ,IACE,QAAS,CAAC,QAAS,CAAC,GAAG,CAAC,IAAI,IAAI;gBAChC,QAAS,CAAC,QAAS,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,EACnC;gBACA,OAAO,QAAS,CAAC,QAAS,CAAC,GAAG,CAAC,CAAC;aACjC;YAED,MAAM,WAAW,GAAG,QAAS,CAAC,QAAS,CAAC,IAAI,CAC1C,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,CAChC,CAAC;YACF,IAAI,CAAC,WAAW;gBACd,MAAM,IAAI,0BAAiB,CAAC,oBAAoB,GAAG,GAAG,GAAG,aAAa,CAAC,CAAC;YAE1E,OAAO,WAAW,CAAC;QACrB,CAAC;KAAA;IAEK,aAAa,CACjB,UAAkB,EAClB,GAAW,EACX,MAAc,EACd,UAAsB;;YAEtB,eAAM,CAAC,GAAG,CACR,kCAAkC;gBAChC,GAAG;gBACH,yBAAyB;gBACzB,MAAM;gBACN,GAAG,CACN,CAAC;YACF,eAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAEvB,MAAM,OAAO,mBACX,GAAG;gBACH,MAAM,IACH,UAAU,CACd,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;gBACjD,GAAG,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,UAAU,CAAC;aACpC,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ;gBACX,MAAM,IAAI,0BAAiB,CACzB,qBAAqB,GAAG,UAAU,GAAG,aAAa,CACnD,CAAC;YAEJ,MAAM,KAAK,GAAG,QAAS,CAAC,QAAS,CAAC,SAAS,CACzC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,CAChC,CAAC;YAEF,IAAI,KAAK,IAAI,CAAC,CAAC;gBACb,MAAM,IAAI,0BAAiB,CAAC,oBAAoB,GAAG,GAAG,GAAG,aAAa,CAAC,CAAC;YAE1E,QAAS,CAAC,QAAS,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;YAErC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEtB,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;IAEK,iBAAiB,CACrB,UAAkB,EAClB,GAAW;;YAEX,eAAM,CAAC,GAAG,CAAC,sCAAsC,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC;YAEtE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;gBACjD,GAAG,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,UAAU,CAAC;aACpC,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ;gBACX,MAAM,IAAI,0BAAiB,CACzB,qBAAqB,GAAG,UAAU,GAAG,aAAa,CACnD,CAAC;YAEJ,MAAM,KAAK,GAAG,QAAS,CAAC,QAAS,CAAC,SAAS,CACzC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,CAChC,CAAC;YAEF,IAAI,KAAK,IAAI,CAAC,CAAC;gBACb,MAAM,IAAI,0BAAiB,CAAC,oBAAoB,GAAG,GAAG,GAAG,aAAa,CAAC,CAAC;YAE1E,QAAS,CAAC,QAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAErC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEtB,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;CACF;AA5KY,eAAe;IAD3B,uBAAU,GAAE;IAGR,8BAAM,EAAC,OAAO,CAAC;IACf,qCAAW,EAAC,SAAS,CAAC;IAEtB,qCAAW,EAAC,UAAU,CAAC;yDAHuB,qBAAM,oBAAN,qBAAM,oDAEtB,gBAAK,oBAAL,gBAAK,oDAEJ,gBAAK,oBAAL,gBAAK;GAN5B,eAAe,CA4K3B;AA5KY,0CAAe;;;;;;;;;;;;;;;;;;;;;ACT5B,iEAMyB;AAGzB,MAAa,SAAS;CAqBrB;AApBC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;uCACuB;AAElC;IAAC,gCAAU,GAAE;IACZ,kCAAY,GAAE;;2CACqB;AAEpC;IAAC,gCAAU,GAAE;IACZ,kCAAY,GAAE;;2CACqB;AAEpC;IAAC,gCAAU,GAAE;IACZ,0BAAI,EAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;;yCACW;AAEpC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;IACV,8BAAQ,GAAE;;8CAC8B;AApB3C,8BAqBC;;;;;;;;;;;;;;;;;;;;;AC9BD,2DAA+D;AAC/D,mDAAiC;AAM1B,IAAM,MAAM,GAAZ,MAAM,MAAM;CAoBlB;AAjBC;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;;sCACjB;AAE3B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;oCACA;AAEzB;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;wCACI;AAE3B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;wCACI;AAE3B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;sCACE;AAE3B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;2CACO;AAnBrB,MAAM;IADlB,qBAAM,GAAE;GACI,MAAM,CAoBlB;AApBY,wBAAM;AAsBN,oBAAY,GAAG,wBAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;;;;;;;;;;;;;;;;;AC7BjE,uDAAwC;AACxC,2DAAkD;AAClD,yFAA8C;AAC9C,qGAAyD;AACzD,+FAAmD;AAS5C,IAAM,YAAY,GAAlB,MAAM,YAAY;CAAG;AAAf,YAAY;IAPxB,mBAAM,EAAC;QACN,OAAO,EAAE;YACP,yBAAc,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,2BAAY,EAAE,CAAC,CAAC;SACtE;QACD,SAAS,EAAE,CAAC,gCAAc,CAAC;QAC3B,WAAW,EAAE,CAAC,sCAAiB,CAAC;KACjC,CAAC;GACW,YAAY,CAAG;AAAf,oCAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbzB,uDAYwB;AACxB,iDAAmC;AACnC,0FAAsD;AACtD,qFAAyC;AACzC,+FAAmD;AACnD,oHAA+E;AAE/E,wFAAqD;AAG9C,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAC5B,YAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAIhD,SAAS,CACL,SAAoB,EACrB,GAA4B,EAC5B,GAAa;;YAEpB,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,eAAM,CAAC,GAAG,CACR,wDAAwD,GAAG,SAAS,GAAG,GAAG,CAC3E,CAAC;YACF,eAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAEtB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;YAEzE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,MAAM;aACf,CAAC,CAAC;QACL,CAAC;KAAA;IAIK,qBAAqB,CAClB,GAA4B,EAC5B,GAAa;;YAEpB,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,eAAM,CAAC,GAAG,CACR,uDAAuD,GAAG,SAAS,GAAG,GAAG,CAC1E,CAAC;YAEF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;YAE3E,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,OAAO;aAChB,CAAC,CAAC;QACL,CAAC;KAAA;IAIK,aAAa,CAAc,EAAU,EAAS,GAAa;;YAC/D,eAAM,CAAC,GAAG,CAAC,mCAAmC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YAEjE,IAAI,CAAC,0BAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,iCAAiC;iBACzC,CAAC,CAAC;aACJ;YAED,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAE3D,IAAI,CAAC,MAAM,EAAE;gBACX,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,mBAAmB,GAAG,EAAE,GAAG,aAAa;iBAChD,CAAC,CAAC;aACJ;YAED,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,MAAM;aACf,CAAC,CAAC;QACL,CAAC;KAAA;IAIK,YAAY,CACH,EAAU,EACf,SAAoB,EACrB,GAA4B,EAC5B,GAAa;;YAEpB,eAAM,CAAC,GAAG,CAAC,mCAAmC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YAEjE,IAAI,CAAC,0BAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oCAAoC;iBAC5C,CAAC,CAAC;aACJ;YAED,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAC/D,IAAI,CAAC,UAAU,EAAE;gBACf,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,mBAAmB,GAAG,EAAE,GAAG,aAAa;iBAChD,CAAC,CAAC;aACJ;YAED,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,IAAI,SAAS,IAAI,UAAU,CAAC,MAAM,EAAE;gBAClC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,iDAAiD;iBACzD,CAAC,CAAC;aACJ;YAED,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CACnD,EAAE,EACF,SAAS,EACT,SAAS,CACV,CAAC;YACF,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,MAAM;aACf,CAAC,CAAC;QACL,CAAC;KAAA;IAIK,YAAY,CACH,EAAU,EAChB,GAA4B,EAC5B,GAAa;;YAEpB,eAAM,CAAC,GAAG,CAAC,sCAAsC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YAEpE,IAAI,CAAC,0BAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oCAAoC;iBAC5C,CAAC,CAAC;aACJ;YAED,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAC/D,IAAI,CAAC,UAAU,EAAE;gBACf,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,mBAAmB,GAAG,EAAE,GAAG,aAAa;iBAChD,CAAC,CAAC;aACJ;YAED,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,IAAI,SAAS,IAAI,UAAU,CAAC,MAAM,EAAE;gBAClC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,iDAAiD;iBACzD,CAAC,CAAC;aACJ;YAED,MAAM,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;YAC/C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,OAAO,EAAE,mBAAmB,GAAG,EAAE,GAAG,WAAW;aAChD,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AAnJO;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,iBAAI,GAAE;IAEJ,4BAAI,GAAE;IACN,2BAAG,GAAE;IACL,2BAAG,GAAE;;yDAFa,sBAAS,oBAAT,sBAAS,oDAChB,oDAAuB,oBAAvB,oDAAuB,oDACvB,kBAAQ,oBAAR,kBAAQ;;kDAcrB;AAIK;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,gBAAG,GAAE;IAEH,2BAAG,GAAE;IACL,2BAAG,GAAE;;yDADM,oDAAuB,oBAAvB,oDAAuB,oDACvB,kBAAQ,oBAAR,kBAAQ;;8DAarB;AAIK;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,gBAAG,EAAC,KAAK,CAAC;IACU,6BAAK,EAAC,IAAI,CAAC;IAAc,2BAAG,GAAE;;iEAAM,kBAAQ,oBAAR,kBAAQ;;sDAuBhE;AAIK;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,gBAAG,EAAC,KAAK,CAAC;IAER,6BAAK,EAAC,IAAI,CAAC;IACX,4BAAI,GAAE;IACN,2BAAG,GAAE;IACL,2BAAG,GAAE;;iEAFa,sBAAS,oBAAT,sBAAS,oDAChB,oDAAuB,oBAAvB,oDAAuB,oDACvB,kBAAQ,oBAAR,kBAAQ;;qDAoCrB;AAIK;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,mBAAM,EAAC,KAAK,CAAC;IAEX,6BAAK,EAAC,IAAI,CAAC;IACX,2BAAG,GAAE;IACL,2BAAG,GAAE;;iEADM,oDAAuB,oBAAvB,oDAAuB,oDACvB,kBAAQ,oBAAR,kBAAQ;;qDAgCrB;AAvJU,iBAAiB;IAD7B,uBAAU,EAAC,SAAS,CAAC;yDAEgB,gCAAc,oBAAd,gCAAc;GADvC,iBAAiB,CAwJ7B;AAxJY,8CAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtB9B,uDAAoD;AACpD,2DAA+C;AAC/C,mDAAwC;AAKjC,IAAM,cAAc,GAApB,MAAM,cAAc;IACzB,YAC0C,WAAkC;QAAlC,gBAAW,GAAX,WAAW,CAAuB;IACzE,CAAC;IAEE,SAAS,CAAC,SAAoB,EAAE,MAAc;;YAClD,eAAM,CAAC,GAAG,CACR,kDAAkD,GAAG,MAAM,GAAG,GAAG,CAClE,CAAC;YACF,eAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAEtB,MAAM,MAAM,mBACV,MAAM,IACH,SAAS,CACb,CAAC;YAEF,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC/C,CAAC;KAAA;IAEK,qBAAqB,CAAC,MAAc;;YACxC,eAAM,CAAC,GAAG,CAAC,yCAAyC,GAAG,MAAM,GAAG,UAAU,CAAC,CAAC;YAE5E,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;QAClE,CAAC;KAAA;IAEK,aAAa,CAAC,GAAW;;YAC7B,eAAM,CAAC,GAAG,CAAC,iCAAiC,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC;YAEjE,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC3E,CAAC;KAAA;IAEK,YAAY,CAChB,GAAW,EACX,MAAc,EACd,SAAoB;;YAEpB,eAAM,CAAC,GAAG,CACR,gCAAgC;gBAC9B,GAAG;gBACH,yBAAyB;gBACzB,MAAM;gBACN,GAAG,CACN,CAAC;YACF,eAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAEtB,MAAM,MAAM,mBACV,GAAG;gBACH,MAAM,IACH,SAAS,CACb,CAAC;YAEF,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE;gBACnE,GAAG,EAAE,IAAI;aACV,CAAC,CAAC;QACL,CAAC;KAAA;IAEK,gBAAgB,CAAC,GAAW;;YAChC,eAAM,CAAC,GAAG,CAAC,oCAAoC,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC;YAEpE,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;QAC/D,CAAC;KAAA;CACF;AA7DY,cAAc;IAD1B,uBAAU,GAAE;IAGR,qCAAW,EAAC,QAAQ,CAAC;yDAA+B,gBAAK,oBAAL,gBAAK;GAFjD,cAAc,CA6D1B;AA7DY,wCAAc;;;;;;;;;;;;;;;;;;;;AEP3B,mDAA2C;AAE3C,MAAa,WAAW;IACf,MAAM,CAAC,QAAQ,CAAC,EAAU;QAC/B,OAAO,8BAAe,EAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;CACF;AAJD,kCAIC;;;;;;;;;;;;;;;;;;;;;ACLD,iEAMyB;AAEzB,MAAa,OAAO;CAyBnB;AAxBC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;qCACuB;AAElC;IAAC,gCAAU,GAAE;IACZ,6BAAO,GAAE;;sCACyB;AAEnC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;yCACkB;AAE7B;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;4CAC8B;AAEzC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;IACV,kCAAY,GAAE;;yCACqB;AAEpC;IAAC,gCAAU,GAAE;IACZ,0BAAI,EAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;;uCACE;AAxB7B,0BAyBC;AAED,MAAa,YAAY;CAQxB;AAPC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;2CACwB;AAEnC;IAAC,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;8CAC2B;AAPxC,oCAQC;;;;;;;;;;;;;;;;;;;;;AC3CD,2DAA+D;AAMxD,IAAM,IAAI,GAAV,MAAM,IAAI;CAoBhB;AAjBC;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;kCACA;AAEzB;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;;mCACb;AAE1B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;sCACI;AAE7B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;yCACO;AAEhC;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;sCACI;AAE3B;IAAC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;;oCACE;AAnBhB,IAAI;IADhB,qBAAM,GAAE;GACI,IAAI,CAoBhB;AApBY,oBAAI;AAsBJ,kBAAU,GAAG,wBAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;AC7B7D,uDAAwC;AACxC,wFAA+C;AAC/C,8FAAqD;AACrD,2DAAkD;AAClD,kFAA0C;AAOnC,IAAM,WAAW,GAAjB,MAAM,WAAW;CAAG;AAAd,WAAW;IALvB,mBAAM,EAAC;QACN,OAAO,EAAE,CAAC,yBAAc,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,uBAAU,EAAE,CAAC,CAAC,CAAC;QAC5E,SAAS,EAAE,CAAC,4BAAY,CAAC;QACzB,WAAW,EAAE,CAAC,kCAAe,CAAC;KAC/B,CAAC;GACW,WAAW,CAAG;AAAd,kCAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXxB,uDAYwB;AACxB,wFAA+C;AAC/C,iDAAmC;AACnC,8EAAqC;AACrC,6CAAiC;AACjC,0FAAsD;AACtD,oHAA+E;AAC/E,wFAAqD;AAG9C,IAAM,eAAe,GAArB,MAAM,eAAe;IAC1B,YAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAAG,CAAC;IAG5C,OAAO,CAAS,OAAgB,EAAS,GAAa;;YAC1D,eAAM,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;YACnD,eAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAEpB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,OAAO,CAAC,KAAM,CAAC,CAAC;YACxE,IAAI,QAAQ,EAAE;gBACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,mCAAmC;iBAC3C,CAAC,CAAC;aACJ;YAED,OAAO,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,QAAS,CAAC,CAAC;YAE9D,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACtD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,IAAI;aACb,CAAC,CAAC;QACL,CAAC;KAAA;IAGK,WAAW,CAAQ,GAAa;;YACpC,eAAM,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;YAElD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;YACpD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,KAAK;aACd,CAAC,CAAC;QACL,CAAC;KAAA;IAGK,WAAW,CAAc,EAAU,EAAS,GAAa;;YAC7D,eAAM,CAAC,GAAG,CAAC,+BAA+B,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YAE7D,IAAI,CAAC,0BAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oCAAoC;iBAC5C,CAAC,CAAC;aACJ;YAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAErD,IAAI,CAAC,IAAI,EAAE;gBACT,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,gBAAgB,GAAG,EAAE,GAAG,aAAa;iBAC7C,CAAC,CAAC;aACJ;YAED,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,IAAI;aACb,CAAC,CAAC;QACL,CAAC;KAAA;IAIK,UAAU,CACD,EAAU,EACf,OAAgB,EACjB,GAA4B,EAC5B,GAAa;;YAEpB,eAAM,CAAC,GAAG,CAAC,+BAA+B,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YAC7D,eAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAEpB,IAAI,CAAC,0BAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oCAAoC;iBAC5C,CAAC,CAAC;aACJ;YAED,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,eAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACtB,IAAI,SAAS,IAAI,EAAE,EAAE;gBACnB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,+CAA+C;iBACvD,CAAC,CAAC;aACJ;YAED,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,EAAE;gBACnC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,OAAO,CAAC,KAAM,CAAC,CAAC;gBACxE,IAAI,QAAQ,EAAE;oBACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBAC1B,MAAM,EAAE,GAAG;wBACX,KAAK,EAAE,mCAAmC;qBAC3C,CAAC,CAAC;iBACJ;aACF;YAED,OAAO,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,QAAS,CAAC,CAAC;YAE9D,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;YAC7D,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,IAAI;aACb,CAAC,CAAC;QACL,CAAC;KAAA;IAIK,UAAU,CACD,EAAU,EAChB,GAA4B,EAC5B,GAAa;;YAEpB,eAAM,CAAC,GAAG,CAAC,kCAAkC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC;YAEhE,IAAI,CAAC,0BAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,oCAAoC;iBAC5C,CAAC,CAAC;aACJ;YAED,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,IAAI,SAAS,IAAI,EAAE,EAAE;gBACnB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,+CAA+C;iBACvD,CAAC,CAAC;aACJ;YAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAErD,IAAI,CAAC,IAAI,EAAE;gBACT,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,MAAM,EAAE,GAAG;oBACX,KAAK,EAAE,gBAAgB,GAAG,EAAE,GAAG,aAAa;iBAC7C,CAAC,CAAC;aACJ;YAED,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAC3C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,MAAM,EAAE,GAAG;gBACX,OAAO,EAAE,gBAAgB,GAAG,EAAE,GAAG,WAAW;aAC7C,CAAC,CAAC;QACL,CAAC;KAAA;IAEK,YAAY,CAAC,QAAgB;;YACjC,eAAM,CAAC,GAAG,CAAC,iCAAiC,GAAG,QAAQ,GAAG,UAAU,CAAC,CAAC;YAEtE,MAAM,YAAY,GAAG,EAAE,CAAC;YACxB,OAAO,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QACnD,CAAC;KAAA;CACF;AAtJO;IADL,iBAAI,GAAE;IACQ,4BAAI,GAAE;IAAoB,2BAAG,GAAE;;yDAAf,kBAAO,oBAAP,kBAAO,oDAAc,kBAAQ,oBAAR,kBAAQ;;8CAmB3D;AAGK;IADL,gBAAG,GAAE;IACa,2BAAG,GAAE;;yDAAM,kBAAQ,oBAAR,kBAAQ;;kDAQrC;AAGK;IADL,gBAAG,EAAC,KAAK,CAAC;IACQ,6BAAK,EAAC,IAAI,CAAC;IAAc,2BAAG,GAAE;;iEAAM,kBAAQ,oBAAR,kBAAQ;;kDAuB9D;AAIK;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,gBAAG,EAAC,KAAK,CAAC;IAER,6BAAK,EAAC,IAAI,CAAC;IACX,4BAAI,GAAE;IACN,2BAAG,GAAE;IACL,2BAAG,GAAE;;iEAFW,kBAAO,oBAAP,kBAAO,oDACZ,oDAAuB,oBAAvB,oDAAuB,oDACvB,kBAAQ,oBAAR,kBAAQ;;iDAsCrB;AAIK;IAFL,sBAAS,EAAC,6BAAY,CAAC;IACvB,mBAAM,EAAC,KAAK,CAAC;IAEX,6BAAK,EAAC,IAAI,CAAC;IACX,2BAAG,GAAE;IACL,2BAAG,GAAE;;iEADM,oDAAuB,oBAAvB,oDAAuB,oDACvB,kBAAQ,oBAAR,kBAAQ;;iDAiCrB;AAlJU,eAAe;IAD3B,uBAAU,EAAC,OAAO,CAAC;yDAEgB,4BAAY,oBAAZ,4BAAY;GADnC,eAAe,CA0J3B;AA1JY,0CAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpB5B,uDAAoD;AACpD,2DAA+C;AAC/C,mDAAwC;AAIjC,IAAM,YAAY,GAAlB,MAAM,YAAY;IACvB,YACwC,SAA8B;QAA9B,cAAS,GAAT,SAAS,CAAqB;IACnE,CAAC;IAEJ,OAAO,CAAC,OAAgB;QACtB,eAAM,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;QAC5C,eAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAEpB,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IAEK,WAAW;;YACf,eAAM,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;YAEhD,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACrC,CAAC;KAAA;IAEK,WAAW,CAAC,EAAU;;YAC1B,eAAM,CAAC,GAAG,CAAC,8BAA8B,GAAG,EAAE,GAAG,UAAU,CAAC,CAAC;YAE7D,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACxE,CAAC;KAAA;IAEK,cAAc,CAAC,KAAa;;YAChC,eAAM,CAAC,GAAG,CAAC,iCAAiC,GAAG,KAAK,GAAG,UAAU,CAAC,CAAC;YAEnE,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;QACxD,CAAC;KAAA;IAEK,UAAU,CAAC,GAAW,EAAE,OAAgB;;YAC5C,eAAM,CAAC,GAAG,CAAC,6BAA6B,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC;YAC7D,eAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAEpB,MAAM,IAAI,mBACR,GAAG,IACA,OAAO,CACX,CAAC;YAEF,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE;gBAC/D,GAAG,EAAE,IAAI;aACV,CAAC,CAAC;QACL,CAAC;KAAA;IAED,oDAAoD;IAC9C,cAAc,CAAC,GAAW;;YAC9B,eAAM,CAAC,GAAG,CAAC,gCAAgC,GAAG,GAAG,GAAG,UAAU,CAAC,CAAC;YAEhE,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;QAC7D,CAAC;KAAA;CACF;AAlDY,YAAY;IADxB,uBAAU,GAAE;IAGR,qCAAW,EAAC,MAAM,CAAC;yDAA6B,gBAAK,oBAAL,gBAAK;GAF7C,YAAY,CAkDxB;AAlDY,oCAAY;;;;;;;;;ACRzB;;;GAGG;;;;;;;;;;;AAEH,uDAAwD;AACxD,mDAA2C;AAC3C,uDAA2C;AAE3C,6EAA6C;AAC7C,sDAA0C;AAC1C,+CAAgC;AAEhC,mBAAM,GAAE,CAAC;AAET,SAAe,SAAS;;QACtB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,MAAM,kBAAW,CAAC,MAAM,CAAC,sBAAS,CAAC,CAAC;QAChD,MAAM,YAAY,GAAG,KAAK,CAAC;QAC3B,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QAClC,GAAG,CAAC,UAAU,EAAE,CAAC;QACjB,GAAG,CAAC,cAAc,CAAC,IAAI,uBAAc,EAAE,CAAC,CAAC;QACzC,GAAG,CAAC,GAAG,CACL,OAAO,CAAC;YACN,MAAM,EAAE,cAAc;YACtB,MAAM,EAAE,KAAK;YACb,iBAAiB,EAAE,KAAK;YACxB,MAAM,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE;SAC5B,CAAC,CACH,CAAC;QACF,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;QAC5C,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAElE,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;QACzC,MAAM,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACvB,eAAM,CAAC,GAAG,CACR,kDAAkD,IAAI,IAAI,YAAY,EAAE,CACzE,CAAC;IACJ,CAAC;CAAA;AAED,SAAS,EAAE,CAAC;;;;;;;;ACxCZ;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://angular-memorial-platform/./apps/api/src/app/app.controller.ts","webpack://angular-memorial-platform/./apps/api/src/app/app.module.ts","webpack://angular-memorial-platform/./apps/api/src/app/app.service.ts","webpack://angular-memorial-platform/./apps/api/src/app/auth/auth.controller.ts","webpack://angular-memorial-platform/./apps/api/src/app/auth/auth.module.ts","webpack://angular-memorial-platform/./apps/api/src/app/auth/auth.service.ts","webpack://angular-memorial-platform/./apps/api/src/app/auth/jwt-auth.guard.ts","webpack://angular-memorial-platform/./apps/api/src/app/auth/jwt.strategy.ts","webpack://angular-memorial-platform/./apps/api/src/app/funeral/funeral.dto.ts","webpack://angular-memorial-platform/./apps/api/src/app/funeral/funeral.model.ts","webpack://angular-memorial-platform/./apps/api/src/app/funeral/funeral.module.ts","webpack://angular-memorial-platform/./apps/api/src/app/funeral/funerals.controller.ts","webpack://angular-memorial-platform/./apps/api/src/app/funeral/funerals.service.ts","webpack://angular-memorial-platform/./apps/api/src/app/memorials/memorial.dto.ts","webpack://angular-memorial-platform/./apps/api/src/app/memorials/memorial.model.ts","webpack://angular-memorial-platform/./apps/api/src/app/memorials/memorial.module.ts","webpack://angular-memorial-platform/./apps/api/src/app/memorials/memorials.controller.ts","webpack://angular-memorial-platform/./apps/api/src/app/memorials/memorials.service.ts","webpack://angular-memorial-platform/./apps/api/src/app/messages/message.dto.ts","webpack://angular-memorial-platform/./apps/api/src/app/messages/message.model.ts","webpack://angular-memorial-platform/./apps/api/src/app/messages/message.module.ts","webpack://angular-memorial-platform/./apps/api/src/app/messages/messages.controller.ts","webpack://angular-memorial-platform/./apps/api/src/app/messages/messages.service.ts","webpack://angular-memorial-platform/./apps/api/src/app/persons/person.dto.ts","webpack://angular-memorial-platform/./apps/api/src/app/persons/person.model.ts","webpack://angular-memorial-platform/./apps/api/src/app/persons/person.module.ts","webpack://angular-memorial-platform/./apps/api/src/app/persons/persons.controller.ts","webpack://angular-memorial-platform/./apps/api/src/app/persons/persons.service.ts","webpack://angular-memorial-platform/./apps/api/src/app/shared/auth.inforequest.interface.ts","webpack://angular-memorial-platform/./apps/api/src/app/shared/id.validator.ts","webpack://angular-memorial-platform/./apps/api/src/app/user/user.dto.ts","webpack://angular-memorial-platform/./apps/api/src/app/user/user.model.ts","webpack://angular-memorial-platform/./apps/api/src/app/user/user.module.ts","webpack://angular-memorial-platform/./apps/api/src/app/user/users.controller.ts","webpack://angular-memorial-platform/./apps/api/src/app/user/users.service.ts","webpack://angular-memorial-platform/./apps/api/src/main.ts","webpack://angular-memorial-platform/external commonjs \"@nestjs/common\"","webpack://angular-memorial-platform/external commonjs \"@nestjs/core\"","webpack://angular-memorial-platform/external commonjs \"@nestjs/jwt\"","webpack://angular-memorial-platform/external commonjs \"@nestjs/mongoose\"","webpack://angular-memorial-platform/external commonjs \"@nestjs/passport\"","webpack://angular-memorial-platform/external commonjs \"bcrypt\"","webpack://angular-memorial-platform/external commonjs \"body-parser\"","webpack://angular-memorial-platform/external commonjs \"class-validator\"","webpack://angular-memorial-platform/external commonjs \"dotenv\"","webpack://angular-memorial-platform/external commonjs \"express\"","webpack://angular-memorial-platform/external commonjs \"express-session\"","webpack://angular-memorial-platform/external commonjs \"mongoose\"","webpack://angular-memorial-platform/external commonjs \"neo4j-driver\"","webpack://angular-memorial-platform/external commonjs \"passport-jwt\"","webpack://angular-memorial-platform/webpack/bootstrap","webpack://angular-memorial-platform/webpack/before-startup","webpack://angular-memorial-platform/webpack/startup","webpack://angular-memorial-platform/webpack/after-startup"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\r\n\r\nimport { AppService } from './app.service';\r\n\r\n@Controller('')\r\nexport class AppController {\r\n  constructor(private readonly appService: AppService) {}\r\n\r\n  @Get()\r\n  getData() {\r\n    return this.appService.getData();\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\n\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { UsersModule } from './user/user.module';\r\nimport { AuthModule } from './auth/auth.module';\r\nimport { PersonModule } from './persons/person.module';\r\nimport { FuneralModule } from './funeral/funeral.module';\r\nimport { MemorialModule } from './memorials/memorial.module';\r\nimport { MessageModule } from './messages/message.module';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forRoot(process.env['MONGODB_CONNECTION_STRING']!),\r\n    UsersModule,\r\n    AuthModule,\r\n    PersonModule,\r\n    FuneralModule,\r\n    MemorialModule,\r\n    MessageModule,\r\n  ],\r\n  controllers: [AppController],\r\n  providers: [AppService],\r\n})\r\nexport class AppModule {\r\n  constructor() {\r\n    console.log(process.env['MONGODB_CONNECTION_STRING']);\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  getData(): { message: string } {\r\n    return { message: 'Welcome to api!' };\r\n  }\r\n}\r\n","import {\r\n  Controller,\r\n  Post,\r\n  UseGuards,\r\n  Res,\r\n  Body,\r\n  Get,\r\n  Req,\r\n} from '@nestjs/common';\r\nimport { Response } from 'express';\r\nimport { AuthService } from './auth.service';\r\nimport { UserLoginDto } from '../user/user.dto';\r\n\r\n@Controller('auth')\r\nexport class AuthController {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  @Post('/login')\r\n  async login(@Body() userLoginDto: UserLoginDto, @Res() res: Response) {\r\n    const user = await this.authService.validateUser(userLoginDto);\r\n    if (user == null) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Invalid login attempt',\r\n      });\r\n    }\r\n\r\n    const result = await this.authService.login(user);\r\n    return res.status(200).json({\r\n      status: 200,\r\n      result: {\r\n        jwtToken: result,\r\n        userId: user._id,\r\n        email: user.email,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { UsersModule } from '../user/user.module';\r\nimport { AuthService } from './auth.service';\r\nimport { PassportModule } from '@nestjs/passport';\r\nimport { JwtModule } from '@nestjs/jwt';\r\nimport { AuthController } from './auth.controller';\r\nimport { UsersService } from '../user/users.service';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { UserSchema } from '../user/user.model';\r\nimport { JwtStrategy } from './jwt.strategy';\r\n\r\n@Module({\r\n  imports: [\r\n    UsersModule,\r\n    PassportModule.register({ session: true }),\r\n    JwtModule.register({\r\n      secret: 'keyboard cat',\r\n    }),\r\n    MongooseModule.forFeature([{ name: 'user', schema: UserSchema }]),\r\n  ],\r\n  providers: [AuthService, UsersService, JwtStrategy],\r\n  controllers: [AuthController],\r\n})\r\nexport class AuthModule {}\r\n","import { Injectable, Logger, NotAcceptableException } from '@nestjs/common';\r\nimport { UsersService } from '../user/users.service';\r\nimport * as bcrypt from 'bcrypt';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { User } from '../user/user.model';\r\nimport { UserLoginDto } from '../user/user.dto';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  constructor(\r\n    private readonly userService: UsersService,\r\n    private jwtService: JwtService\r\n  ) {}\r\n\r\n  async validateUser(userLoginDto: UserLoginDto): Promise<User | null> {\r\n    Logger.log('[AuthService] validateUser called');\r\n    Logger.log(userLoginDto);\r\n\r\n    const user: User | null = await this.userService.getUserByEmail(\r\n      userLoginDto.email!\r\n    );\r\n    if (!user) {\r\n      Logger.log(\r\n        '[AuthService] No user found with email: {' + userLoginDto.email + '}'\r\n      );\r\n      return null;\r\n    }\r\n\r\n    Logger.log(\r\n      '[AuthSerice] User found with email: {' + userLoginDto.email + '}'\r\n    );\r\n\r\n    Logger.log(\r\n      'UserLogin password: {' +\r\n        userLoginDto.password +\r\n        '}, UserPassword: {' +\r\n        user.password +\r\n        '}'\r\n    );\r\n\r\n    const passwordValid = await bcrypt.compare(\r\n      userLoginDto.password!,\r\n      user.password!\r\n    );\r\n    if (passwordValid) {\r\n      Logger.log(\r\n        '[AuthService] Invalid password for user with email: {' +\r\n          userLoginDto.email +\r\n          '}'\r\n      );\r\n\r\n      return user;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  async login(user: User) {\r\n    Logger.log('[AuthService] login called');\r\n    Logger.log(user);\r\n\r\n    const payload = {\r\n      _id: user._id,\r\n      email: user.email,\r\n    };\r\n\r\n    const jwtToken = this.jwtService.sign(payload);\r\n    Logger.log('[AuthService] JwtToken created: {' + jwtToken + '}');\r\n\r\n    return jwtToken;\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { AuthGuard } from '@nestjs/passport';\r\n\r\n@Injectable()\r\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\r\n","import { PassportStrategy } from '@nestjs/passport';\r\nimport { ExtractJwt, Strategy } from 'passport-jwt';\r\n\r\nexport class JwtStrategy extends PassportStrategy(Strategy) {\r\n  constructor() {\r\n    super({\r\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n      ignoreExpiration: false,\r\n      secretOrKey: 'keyboard cat',\r\n    });\r\n  }\r\n\r\n  async validate(payload: any) {\r\n    return {\r\n      _id: payload._id,\r\n      email: payload.email,\r\n    };\r\n  }\r\n}\r\n","import {\r\n  IsBoolean,\r\n  IsDateString,\r\n  IsMongoId,\r\n  IsNotEmpty,\r\n  IsString,\r\n} from 'class-validator';\r\n\r\nexport class FuneralDto {\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  @IsMongoId()\r\n  readonly personId: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsDateString()\r\n  readonly dateTime: Date | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  readonly adress: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  readonly postalCode: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  readonly city: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  readonly description: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsBoolean()\r\n  readonly isPrivate: boolean | undefined;\r\n}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { Types } from 'mongoose';\r\n\r\nexport type FuneralDocument = Funeral & Document;\r\n\r\n@Schema()\r\nexport class Funeral {\r\n  _id: string | undefined;\r\n\r\n  @Prop({ type: Types.ObjectId, ref: 'user' })\r\n  userId: string | undefined;\r\n\r\n  @Prop({ type: Types.ObjectId, ref: 'person' })\r\n  person: string | undefined;\r\n\r\n  @Prop({ type: 'Date' })\r\n  dateTime: Date | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  adress: string | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  postalCode: string | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  city: string | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  description: string | undefined;\r\n\r\n  @Prop({ type: 'boolean' })\r\n  isPrivate: boolean | undefined;\r\n}\r\n\r\nexport const FuneralSchema = SchemaFactory.createForClass(Funeral);\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { PersonSchema } from '../persons/person.model';\r\nimport { PersonsService } from '../persons/persons.service';\r\nimport { FuneralSchema } from './funeral.model';\r\nimport { FuneralsController } from './funerals.controller';\r\nimport { FuneralsService } from './funerals.service';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forFeature([{ name: 'funeral', schema: FuneralSchema }]),\r\n    MongooseModule.forFeature([{ name: 'person', schema: PersonSchema }]),\r\n  ],\r\n  providers: [FuneralsService, PersonsService],\r\n  controllers: [FuneralsController],\r\n})\r\nexport class FuneralModule {}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  Logger,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  Res,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { Response } from 'express';\r\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\r\nimport { PersonsService } from '../persons/persons.service';\r\nimport { IGetUserAuthInfoReqeust } from '../shared/auth.inforequest.interface';\r\nimport { IdValidator } from '../shared/id.validator';\r\nimport { FuneralDto } from './funeral.dto';\r\nimport { FuneralsService } from './funerals.service';\r\n\r\n@Controller('funerals')\r\nexport class FuneralsController {\r\n  constructor(private funeralsService: FuneralsService, private personsService: PersonsService) {}\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Post()\r\n  async addFuneral(\r\n    @Body() funeralDto: FuneralDto,\r\n    @Req() req: IGetUserAuthInfoReqeust,\r\n    @Res() res: Response\r\n  ) {\r\n    const requestId = req.user._id;\r\n    Logger.log('[FuneralsController][POST]/funerals called');\r\n    Logger.log(funeralDto);\r\n\r\n    const person = await this.personsService.getPersonById(funeralDto.personId!);\r\n    if (!person) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: \"Person with id: {\" + funeralDto.personId + \"} not found\",\r\n      })\r\n    }\r\n\r\n    const funeral = await this.funeralsService.addFuneral(\r\n      funeralDto,\r\n      requestId\r\n    );\r\n    return res.status(201).json({\r\n      status: 201,\r\n      result: funeral,\r\n    });\r\n  }\r\n\r\n  @Get()\r\n  async getAllFunerals(@Res() res: Response) {\r\n    Logger.log('[FuneralsController][GET]/funerals called');\r\n\r\n    const funerals = await this.funeralsService.getAllFunerals();\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      result: funerals,\r\n    });\r\n  }\r\n\r\n  @Get(':id')\r\n  async getFuneralById(@Param('id') id: string, @Res() res: Response) {\r\n    Logger.log('[FuneralsController][GET]/funerals/' + id + ' called');\r\n\r\n    if (!IdValidator.validate(id)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Id is not in a valid string format',\r\n      });\r\n    }\r\n\r\n    const funeral = await this.funeralsService.getFuneralById(id);\r\n    if (!funeral) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Funeral with id: {' + id + '} not found',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      result: funeral,\r\n    });\r\n  }\r\n\r\n  @Get('/person/:id')\r\n  async getFuneralByPersonId(\r\n    @Param('id') personId: string,\r\n    @Res() res: Response\r\n  ) {\r\n    Logger.log(\r\n      '[FuneralsCotnroller][GET]/funerals/person/' + personId + ' called'\r\n    );\r\n\r\n    if (!IdValidator.validate(personId)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'PersonId is not in a valid string format',\r\n      });\r\n    }\r\n\r\n    const funeral = await this.funeralsService.getFuneralByPersonId(personId);\r\n    if (!funeral) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Funeral with personId: {' + personId + '} not found',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      resut: funeral,\r\n    });\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Put(':id')\r\n  async updateFuneral(\r\n    @Param('id') id: string,\r\n    @Body() funeralDto: FuneralDto,\r\n    @Req() req: IGetUserAuthInfoReqeust,\r\n    @Res() res: Response\r\n  ) {\r\n    Logger.log('[FuneralsController][PUT]/funerals/' + id + ' called');\r\n\r\n    if (!IdValidator.validate(id)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Id is not in a valid string format',\r\n      });\r\n    }\r\n\r\n    const findFuneral = await this.funeralsService.getFuneralById(id);\r\n    if (!findFuneral) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Funeral with id: {' + id + '} not found',\r\n      });\r\n    }\r\n\r\n    const person = await this.personsService.getPersonById(funeralDto.personId!);\r\n    if (!person) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: \"Person with id: {\" + funeralDto.personId + \"} not found\",\r\n      })\r\n    }\r\n\r\n    const requestId = req.user._id;\r\n    if (requestId != findFuneral.userId) {\r\n      return res.status(403).json({\r\n        status: 403,\r\n        error: \"You don't have permission to update this funeral\",\r\n      });\r\n    }\r\n\r\n    const funeral = await this.funeralsService.updateFuneral(\r\n      id,\r\n      requestId,\r\n      funeralDto\r\n    );\r\n    return res.status(201).json({\r\n      status: 201,\r\n      result: funeral,\r\n    });\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Delete(':id')\r\n  async removeFuneralById(\r\n    @Param('id') id: string,\r\n    @Req() req: IGetUserAuthInfoReqeust,\r\n    @Res() res: Response\r\n  ) {\r\n    Logger.log('[FuneralsController][DELETE]/funerals/' + id + ' called');\r\n\r\n    if (!IdValidator.validate(id)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Id is not in a valid string format',\r\n      });\r\n    }\r\n\r\n    const funeral = await this.funeralsService.getFuneralById(id);\r\n    if (!funeral) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Funeral with id: {' + id + '} not found',\r\n      });\r\n    }\r\n\r\n    const requestId = req.user._id;\r\n    if (requestId != funeral.userId) {\r\n      return res.status(403).json({\r\n        status: 403,\r\n        error: \"You don't have permission to delete this funeral\",\r\n      });\r\n    }\r\n\r\n    await this.funeralsService.removeFuneralById(id);\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'Funeral with id: {' + id + '} deleted',\r\n    });\r\n  }\r\n}\r\n","import { Injectable, Logger } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model, Types } from 'mongoose';\r\nimport { FuneralDto } from './funeral.dto';\r\nimport { Funeral, FuneralDocument } from './funeral.model';\r\n\r\n@Injectable()\r\nexport class FuneralsService {\r\n  constructor(\r\n    @InjectModel('funeral')\r\n    private readonly funeralModel: Model<FuneralDocument>\r\n  ) {}\r\n\r\n  async addFuneral(funeralDto: FuneralDto, userId: string): Promise<Funeral> {\r\n    Logger.log(\r\n      '[FuneralsService] addfuneral called with userId: {' + userId + '}'\r\n    );\r\n    Logger.log(funeralDto);\r\n\r\n    const funeral = {\r\n      userId,\r\n      person: funeralDto.personId,\r\n      ...funeralDto,\r\n    };\r\n\r\n    return await (\r\n      await this.funeralModel.create(funeral)\r\n    ).populate('person', '_id name');\r\n  }\r\n\r\n  async getAllFunerals(): Promise<Funeral[]> {\r\n    Logger.log('[FuneralsService] getAllFunerals called');\r\n\r\n    return await this.funeralModel.find({}).populate('person', '_id name');\r\n  }\r\n\r\n  async getFuneralById(_id: string): Promise<Funeral | null> {\r\n    Logger.log('[FuneralsService] getFuneralById(' + _id + ') called');\r\n\r\n    return await this.funeralModel\r\n      .findById({ _id: new Types.ObjectId(_id) })\r\n      .populate('person', '_id name imageBase64');\r\n  }\r\n\r\n  async getFuneralByPersonId(personId: string): Promise<Funeral | null> {\r\n    Logger.log(\r\n      '[FuneralsService] getFuneralByPersonId(' + personId + ') called'\r\n    );\r\n\r\n    return await this.funeralModel\r\n      .findOne({ personId: personId })\r\n      .populate('person', '_id name');\r\n  }\r\n\r\n  async updateFuneral(\r\n    _id: string,\r\n    userId: string,\r\n    funeralDto: FuneralDto\r\n  ): Promise<Funeral | null> {\r\n    Logger.log(\r\n      '[FuneralsService] updateFuneral(' +\r\n        _id +\r\n        ') called with userId: {' +\r\n        userId +\r\n        '}'\r\n    );\r\n    Logger.log(funeralDto);\r\n\r\n    const funeral = {\r\n      _id,\r\n      userId,\r\n      ...funeralDto,\r\n    };\r\n\r\n    return await this.funeralModel\r\n      .findOneAndUpdate({ _id: _id }, funeral, {\r\n        new: true,\r\n      })\r\n      .populate('person', '_id name');\r\n  }\r\n\r\n  async removeFuneralById(_id: string): Promise<Funeral | null> {\r\n    Logger.log('[FuneralsService] removeFuneralById(' + _id + ') called');\r\n\r\n    return await this.funeralModel\r\n      .findOneAndDelete({\r\n        _id: _id,\r\n      })\r\n      .populate('person', '_id name');\r\n  }\r\n}\r\n","import { IsBase64, IsMongoId, IsNotEmpty, IsString } from 'class-validator';\r\n\r\nexport class MemorialDto {\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  @IsMongoId()\r\n  readonly funeralId: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  readonly description: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  @IsBase64()\r\n  readonly imageBase64: string | undefined;\r\n}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { Types } from 'mongoose';\r\nimport { Message } from '../messages/message.model';\r\n\r\nexport type MemorialDocument = Memorial & Document;\r\n\r\n@Schema()\r\nexport class Memorial {\r\n  _id: string | undefined;\r\n\r\n  @Prop({ type: Types.ObjectId, ref: 'user' })\r\n  userId: string | undefined;\r\n\r\n  @Prop({ type: Types.ObjectId, ref: 'funeral' })\r\n  funeralId: string | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  description: string | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  imageBase64: string | undefined;\r\n\r\n  @Prop({ default: [], type: [] })\r\n  messages: Message[] | undefined;\r\n}\r\n\r\nexport const MemorialSchema = SchemaFactory.createForClass(Memorial);\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { MemorialSchema } from './memorial.model';\r\nimport { MemorialsController } from './memorials.controller';\r\nimport { MemorialsService } from './memorials.service';\r\nimport neo4j from 'neo4j-driver';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forFeature([{ name: 'memorial', schema: MemorialSchema }]),\r\n  ],\r\n  providers: [\r\n    MemorialsService,\r\n    {\r\n      provide: 'NEO4J',\r\n      useFactory: () => {\r\n        const neo4jUri = process.env['NEO4J_URI']!;\r\n        const neo4jUser = process.env['NEO4J_USERNAME']!;\r\n        const neo4jPassword = process.env['NEO4J_PASSWORD']!;\r\n        return neo4j.driver(\r\n          neo4jUri,\r\n          neo4j.auth.basic(neo4jUser, neo4jPassword)\r\n        );\r\n      },\r\n    },\r\n  ],\r\n  controllers: [MemorialsController],\r\n})\r\nexport class MemorialModule {}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  Logger,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  Res,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { Response } from 'express';\r\nimport { request } from 'http';\r\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\r\nimport { IGetUserAuthInfoReqeust } from '../shared/auth.inforequest.interface';\r\nimport { IdValidator } from '../shared/id.validator';\r\nimport { MemorialDto } from './memorial.dto';\r\nimport { MemorialsService } from './memorials.service';\r\n\r\n@Controller('memorials')\r\nexport class MemorialsController {\r\n  constructor(private memorialsService: MemorialsService) {}\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Post()\r\n  async addMemorial(\r\n    @Body() memorialDto: MemorialDto,\r\n    @Req() req: IGetUserAuthInfoReqeust,\r\n    @Res() res: Response\r\n  ) {\r\n    Logger.log('[MemorialsController][POST]/memorials called');\r\n    Logger.log(memorialDto);\r\n\r\n    const requestId = req.user._id;\r\n    const memorial = await this.memorialsService.addMemorial(\r\n      memorialDto,\r\n      requestId\r\n    );\r\n\r\n    return res.status(201).json({\r\n      status: 201,\r\n      result: memorial,\r\n    });\r\n  }\r\n\r\n  @Get()\r\n  async getAllMemorials(@Res() res: Response) {\r\n    Logger.log('[MemorialsController][GET]/memorials called');\r\n\r\n    const memorials = await this.memorialsService.getAllMemorials();\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      result: memorials,\r\n    });\r\n  }\r\n\r\n  @Get(':id')\r\n  async getMemorialById(@Param('id') id: string, @Res() res: Response) {\r\n    Logger.log('[MemorialsController][GET]/memorials/' + id + ' called');\r\n\r\n    if (!IdValidator.validate(id)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Id is not in a valid string format',\r\n      });\r\n    }\r\n\r\n    const memorial = await this.memorialsService.getMemorialById(id);\r\n    if (!memorial) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Memorial with id: {' + id + '} not found',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      result: memorial,\r\n    });\r\n  }\r\n\r\n  @Get(':id/recommendations')\r\n  async getRecommendations(@Param('id') id: string, @Res() res: Response) {\r\n    Logger.log(\r\n      '[MemorialsController][GET]/memorials/' + id + '/recommendations called'\r\n    );\r\n\r\n    if (!IdValidator.validate(id)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Id is not in a valid string format',\r\n      });\r\n    }\r\n\r\n    const recommendations =\r\n      await this.memorialsService.getTopMemorialsByMessageReactions(id);\r\n    return res.status(200).json({\r\n      status: 200,\r\n      result: recommendations,\r\n    });\r\n  }\r\n\r\n  @Get('/funeral/:id')\r\n  async getMemorialByFuneralId(@Param('id') id: string, @Res() res: Response) {\r\n    Logger.log('[MemorialsService][GET]/memorials/funeral/' + id + ' called');\r\n\r\n    if (!IdValidator.validate(id)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Id is not in a valid string format',\r\n      });\r\n    }\r\n\r\n    const memorial = await this.memorialsService.getMemorialFromFuneralId(id);\r\n    if (!memorial) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Memorial with funeralId: {' + id + '} not found',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      result: memorial,\r\n    });\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Put(':id')\r\n  async updateMemorial(\r\n    @Param('id') id: string,\r\n    @Body() memorialDto: MemorialDto,\r\n    @Req() req: IGetUserAuthInfoReqeust,\r\n    @Res() res: Response\r\n  ) {\r\n    Logger.log('[MemorialsController][PUT]/memorials/' + id + ' called');\r\n    Logger.log(memorialDto);\r\n\r\n    if (!IdValidator.validate(id)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Id is not in a valid string format',\r\n      });\r\n    }\r\n\r\n    const findMemorial = await this.memorialsService.getMemorialById(id);\r\n    if (!findMemorial) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Memorial with id: {' + id + '} not found',\r\n      });\r\n    }\r\n\r\n    const requestId = req.user._id;\r\n    if (requestId != findMemorial.userId) {\r\n      return res.status(403).json({\r\n        status: 403,\r\n        error: \"You don't have permission to update this memorial\",\r\n      });\r\n    }\r\n\r\n    const memorial = await this.memorialsService.updateMemorial(\r\n      id,\r\n      requestId,\r\n      memorialDto\r\n    );\r\n    return res.status(201).json({\r\n      status: 201,\r\n      result: memorial,\r\n    });\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Delete(':id')\r\n  async removeMemorialById(\r\n    @Param('id') id: string,\r\n    @Req() req: IGetUserAuthInfoReqeust,\r\n    @Res() res: Response\r\n  ) {\r\n    Logger.log('[MemorialsSerivce][DELETE]/memorials/' + id + ' called');\r\n\r\n    if (!IdValidator.validate(id)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Id is not in a valid string format',\r\n      });\r\n    }\r\n\r\n    const funeral = await this.memorialsService.getMemorialById(id);\r\n    if (!funeral) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Memorial with id: {' + id + '} not found',\r\n      });\r\n    }\r\n\r\n    const requestId = req.user._id;\r\n    if (requestId != funeral.userId) {\r\n      return res.status(403).json({\r\n        status: 403,\r\n        error: \"You don't have permission to delete this memorial\",\r\n      });\r\n    }\r\n\r\n    await this.memorialsService.removeMemorialById(id);\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'Memorial with id: {' + id + '} deleted',\r\n    });\r\n  }\r\n}\r\n","import { Inject, Injectable, Logger } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model, Types } from 'mongoose';\r\nimport { MemorialDto } from './memorial.dto';\r\nimport { Memorial, MemorialDocument } from './memorial.model';\r\nimport { Driver } from 'neo4j-driver';\r\n\r\n@Injectable()\r\nexport class MemorialsService {\r\n  constructor(\r\n    @Inject('NEO4J') private readonly neo4jDriver: Driver,\r\n    @InjectModel('memorial')\r\n    private readonly memorialModel: Model<MemorialDocument>\r\n  ) {}\r\n\r\n  async addMemorial(\r\n    MemorialDto: MemorialDto,\r\n    userId: string\r\n  ): Promise<Memorial> {\r\n    Logger.log(\r\n      '[MemorialsService] addMemorial called with userId: {' + userId + '}'\r\n    );\r\n    Logger.log(MemorialDto);\r\n\r\n    const memorial = {\r\n      userId,\r\n      ...MemorialDto,\r\n    };\r\n\r\n    return await this.memorialModel.create(memorial);\r\n  }\r\n\r\n  async getAllMemorials(): Promise<Memorial[]> {\r\n    Logger.log('[MemorialsService] getAllMemorials called');\r\n\r\n    return await this.memorialModel.find({});\r\n  }\r\n\r\n  async getTopMemorialsByMessageReactions(\r\n    memorialId: string\r\n  ): Promise<string[]> {\r\n    Logger.log(\r\n      '[MemorialsService] getTopMemorialsByMessageReactions(' +\r\n        memorialId +\r\n        ') called'\r\n    );\r\n\r\n    const session = this.neo4jDriver.session();\r\n\r\n    const result = await session.run(\r\n      `\r\n      MATCH (m:Memorial { memorialId: $memorialId })<-[r1:REACTED_TO]-(u1:User)-[r2:REACTED_TO]->(m2:Memorial)\r\n      WHERE m <> m2\r\n      WITH m2.memorialId AS memorialId, count(*) AS reactions\r\n      ORDER BY reactions DESC\r\n      RETURN memorialId\r\n      LIMIT 3\r\n    `,\r\n      { memorialId }\r\n    );\r\n\r\n    session.close();\r\n\r\n    return result.records.map((record) => record.get('memorialId'));\r\n  }\r\n\r\n  async getMemorialById(_id: string): Promise<Memorial | null> {\r\n    Logger.log('[MemorialsService] getMemorialById(' + _id + ') called');\r\n\r\n    return await this.memorialModel.findById({ _id: new Types.ObjectId(_id) });\r\n  }\r\n\r\n  async getMemorialFromFuneralId(funeralId: string): Promise<Memorial | null> {\r\n    Logger.log(\r\n      '[MemorialsService] getMemorialFromFuneralId(' + funeralId + ') called'\r\n    );\r\n\r\n    return await this.memorialModel.findOne({ funeralId: funeralId });\r\n  }\r\n\r\n  async updateMemorial(\r\n    _id: string,\r\n    userId: string,\r\n    memorialDto: MemorialDto\r\n  ): Promise<Memorial | null> {\r\n    Logger.log(\r\n      '[MemorialsService] updateMemorial(' +\r\n        _id +\r\n        ') called with userId: {' +\r\n        userId +\r\n        '}'\r\n    );\r\n    Logger.log(memorialDto);\r\n\r\n    const memorial = {\r\n      userId,\r\n      ...memorialDto,\r\n    };\r\n\r\n    return await this.memorialModel.findOneAndUpdate({ _id: _id }, memorial, {\r\n      new: true,\r\n    });\r\n  }\r\n\r\n  async removeMemorialById(_id: string): Promise<Memorial | null> {\r\n    Logger.log('[MemorialsService] removeMemorialById(' + _id + ') called');\r\n\r\n    return await this.memorialModel.findOneAndDelete({ _id: _id });\r\n  }\r\n}\r\n","import {\r\n  IsBase64,\r\n  IsBoolean,\r\n  IsDateString,\r\n  IsMongoId,\r\n  IsNotEmpty,\r\n  IsNumber,\r\n  IsString,\r\n} from 'class-validator';\r\n\r\nexport class MessageDto {\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  @IsMongoId()\r\n  readonly memorialId: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsDateString()\r\n  readonly dateTime: Date | undefined;\r\n\r\n  @IsString()\r\n  readonly qoute: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  readonly message: string | undefined;\r\n\r\n  @IsString()\r\n  @IsBase64()\r\n  readonly imageBase64: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsBoolean()\r\n  readonly showName: boolean | undefined;\r\n}\r\n\r\nexport class MessageRequestDto {\r\n  @IsNotEmpty()\r\n  @IsNumber()\r\n  readonly _id: number | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  @IsMongoId()\r\n  readonly memorialId: string | undefined;\r\n}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { Types } from 'mongoose';\r\n\r\nexport type MessageDocument = Message & Document;\r\n\r\n@Schema()\r\nexport class Message {\r\n  @Prop({ type: 'number' })\r\n  _id: number | undefined;\r\n\r\n  @Prop({ type: Types.ObjectId, ref: 'user' })\r\n  userId: string | undefined;\r\n\r\n  @Prop({ type: Types.ObjectId, ref: 'memorial' })\r\n  memorialId: string | undefined;\r\n\r\n  @Prop({ type: 'Date' })\r\n  dateTime: Date | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  qoute: string | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  message: string | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  imageBase64: string | undefined;\r\n\r\n  @Prop({ type: 'boolean' })\r\n  showName: boolean | undefined;\r\n}\r\n\r\nexport const MessageSchema = SchemaFactory.createForClass(Message);\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { MemorialSchema } from '../memorials/memorial.model';\r\nimport { MemorialsService } from '../memorials/memorials.service';\r\nimport { MessageSchema } from './message.model';\r\nimport { MessagesController } from './messages.controller';\r\nimport { MessagesService } from './messages.service';\r\nimport neo4j from 'neo4j-driver';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forFeature([\r\n      { name: 'message', schema: MessageSchema },\r\n      { name: 'memorial', schema: MemorialSchema },\r\n    ]),\r\n  ],\r\n  providers: [\r\n    MessagesService,\r\n    MemorialsService,\r\n    {\r\n      provide: 'NEO4J',\r\n      useFactory: () => {\r\n        const neo4jUri = process.env['NEO4J_URI']!;\r\n        const neo4jUser = process.env['NEO4J_USERNAME']!;\r\n        const neo4jPassword = process.env['NEO4J_PASSWORD']!;\r\n        return neo4j.driver(\r\n          neo4jUri,\r\n          neo4j.auth.basic(neo4jUser, neo4jPassword)\r\n        );\r\n      },\r\n    },\r\n  ],\r\n  controllers: [MessagesController],\r\n})\r\nexport class MessageModule {}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  Logger,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  Res,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { Response } from 'express';\r\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\r\nimport { MemorialsService } from '../memorials/memorials.service';\r\nimport { IGetUserAuthInfoReqeust } from '../shared/auth.inforequest.interface';\r\nimport { IdValidator } from '../shared/id.validator';\r\nimport { MessageDto, MessageRequestDto } from './message.dto';\r\nimport { MessagesService } from './messages.service';\r\n\r\n@Controller('messages')\r\nexport class MessagesController {\r\n  constructor(\r\n    private messagesService: MessagesService,\r\n    private memorialsService: MemorialsService\r\n  ) {}\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Post()\r\n  async addMessageToMemorial(\r\n    @Body() messageDto: MessageDto,\r\n    @Req() req: IGetUserAuthInfoReqeust,\r\n    @Res() res: Response\r\n  ) {\r\n    Logger.log('[MessagesController][POST]/messages called');\r\n    Logger.log(messageDto);\r\n\r\n    const memorialId = messageDto.memorialId!;\r\n    const memorial = this.memorialsService.getMemorialById(memorialId);\r\n    if (!memorial) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Memorial with id: {' + memorialId + '} not found',\r\n      });\r\n    }\r\n\r\n    const requestId = req.user._id;\r\n    const message = await this.messagesService.addMessageToMemorial(\r\n      messageDto,\r\n      requestId\r\n    );\r\n    return res.status(201).json({\r\n      status: 201,\r\n      result: message,\r\n    });\r\n  }\r\n\r\n  @Get('/memorial/:id')\r\n  async getMessageFromMemorialId(\r\n    @Param('id') id: string,\r\n    @Res() res: Response\r\n  ) {\r\n    Logger.log('[MessagesController][GET]/messages/memorial/' + id + ' called');\r\n\r\n    const messages = await this.messagesService.getAllMessagesFromMemorialId(\r\n      id\r\n    );\r\n    return res.status(200).json({\r\n      status: 200,\r\n      result: messages,\r\n    });\r\n  }\r\n\r\n  @Get()\r\n  async getMessage(\r\n    @Body() messageRequestDto: MessageRequestDto,\r\n    @Res() res: Response\r\n  ) {\r\n    const { _id, memorialId } = messageRequestDto!;\r\n\r\n    Logger.log('[MessagesService][GET]/messages/' + _id + ' called');\r\n\r\n    const message = await this.messagesService.getMessageById(\r\n      memorialId!,\r\n      _id!\r\n    );\r\n    if (!message) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        message: 'Message with id: {' + _id + '} not found',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      result: message,\r\n    });\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Put(':id')\r\n  async updateMessage(\r\n    @Param('id') id: number,\r\n    @Body() messageDto: MessageDto,\r\n    @Req() req: IGetUserAuthInfoReqeust,\r\n    @Res() res: Response\r\n  ) {\r\n    const memorialId = messageDto.memorialId;\r\n    Logger.log('[MessagesController][PUT]/messages/' + id + ' called');\r\n    Logger.log(messageDto);\r\n\r\n    const findMesssage = await this.messagesService.getMessageById(\r\n      memorialId!,\r\n      id\r\n    );\r\n    if (!findMesssage) {\r\n      return res.status(404).json({\r\n        statut: 404,\r\n        error:\r\n          'Message with id: {' +\r\n          id +\r\n          '} not found at memorialId: {' +\r\n          memorialId +\r\n          '}',\r\n      });\r\n    }\r\n\r\n    const requestId = req.user._id;\r\n    if (requestId != findMesssage.userId) {\r\n      return res.status(403).json({\r\n        status: 403,\r\n        error: \"You don't have permission to update this message\",\r\n      });\r\n    }\r\n\r\n    const message = await this.messagesService.updateMessage(\r\n      memorialId!,\r\n      id,\r\n      requestId,\r\n      messageDto\r\n    );\r\n    return res.status(201).json({\r\n      status: 201,\r\n      result: message,\r\n    });\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Delete()\r\n  async removeMessageById(\r\n    @Body() messageRequestDto: MessageRequestDto,\r\n    @Req() req: IGetUserAuthInfoReqeust,\r\n    @Res() res: Response\r\n  ) {\r\n    const { _id, memorialId } = messageRequestDto;\r\n    Logger.log('[MessagesService][DELETE]/messages/' + _id + ' called');\r\n\r\n    const message = await this.messagesService.getMessageById(\r\n      memorialId!,\r\n      _id!\r\n    );\r\n    if (!message) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Message with id: {' + _id + '} not found',\r\n      });\r\n    }\r\n\r\n    const requestId = req.user._id;\r\n    if (requestId != message.userId) {\r\n      return res.status(403).json({\r\n        status: 403,\r\n        error: \"You don't have permission to delete this message\",\r\n      });\r\n    }\r\n\r\n    await this.messagesService.removeMessageById(memorialId!, _id!);\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'Message with id: {' + _id + '} deleted',\r\n    });\r\n  }\r\n}\r\n","import { Inject, Injectable, Logger, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model, Types } from 'mongoose';\r\nimport { Memorial, MemorialDocument } from '../memorials/memorial.model';\r\nimport { MessageDto } from './message.dto';\r\nimport { Message, MessageDocument } from './message.model';\r\nimport { Driver } from 'neo4j-driver';\r\n\r\n@Injectable()\r\nexport class MessagesService {\r\n  constructor(\r\n    @Inject('NEO4J') private readonly neo4jDriver: Driver,\r\n    @InjectModel('message')\r\n    private readonly messageModel: Model<MessageDocument>,\r\n    @InjectModel('memorial')\r\n    private readonly memorialModel: Model<MemorialDocument>\r\n  ) {}\r\n\r\n  async addMessageToMemorial(\r\n    messageDto: MessageDto,\r\n    userId: string\r\n  ): Promise<any> {\r\n    Logger.log(\r\n      '[MessagesService] addMessage called with userId: {' + userId + '}'\r\n    );\r\n\r\n    const memorial = await this.memorialModel.findById({\r\n      _id: new Types.ObjectId(messageDto.memorialId),\r\n    });\r\n    if (!memorial) throw new NotFoundException();\r\n\r\n    const message = {\r\n      _id: memorial!.messages!.length,\r\n      userId,\r\n      ...messageDto,\r\n    };\r\n\r\n    memorial!.messages!.push(message);\r\n    await memorial.save();\r\n\r\n    // Create a relationship between the user node and the memorial node in Neo4j\r\n    const session = this.neo4jDriver.session();\r\n    await session.run(\r\n      `\r\n      MERGE (u:User {userId: $userId})\r\n      MERGE (m:Memorial {memorialId: $memorialId})\r\n      MERGE (u)-[:REACTED_TO]->(m)\r\n      `,\r\n      {\r\n        userId,\r\n        memorialId: memorial.id,\r\n      }\r\n    );\r\n    session.close();\r\n\r\n    Logger.log('[MessagesService] result of Neo4J:');\r\n\r\n    return message;\r\n  }\r\n\r\n  async getAllMessagesFromMemorialId(memorialId: string): Promise<Message[]> {\r\n    Logger.log(\r\n      '[MessagesService] getAllMessagesFromMemorialId(' +\r\n        memorialId +\r\n        ') called'\r\n    );\r\n\r\n    const memorial = await this.memorialModel.findById({\r\n      _id: new Types.ObjectId(memorialId),\r\n    });\r\n    if (!memorial) throw new NotFoundException();\r\n\r\n    return memorial!.messages!;\r\n  }\r\n\r\n  async getMessageById(\r\n    memorialId: string,\r\n    _id: number\r\n  ): Promise<Message | null> {\r\n    Logger.log(\r\n      '[MessagesService] getMessageById(' +\r\n        _id +\r\n        ') called with memorialId: {' +\r\n        memorialId +\r\n        '}'\r\n    );\r\n\r\n    const memorial = await this.memorialModel.findById({\r\n      _id: new Types.ObjectId(memorialId),\r\n    });\r\n    if (!memorial)\r\n      throw new NotFoundException(\r\n        'Memorial with id: {' + memorialId + '} not found'\r\n      );\r\n\r\n    if (\r\n      memorial!.messages![_id] != null &&\r\n      memorial!.messages![_id]._id == _id\r\n    ) {\r\n      return memorial!.messages![_id];\r\n    }\r\n\r\n    const findMessage = memorial!.messages!.find(\r\n      (message) => message._id == _id\r\n    );\r\n    if (!findMessage)\r\n      throw new NotFoundException('Message with id: {' + _id + '} not found');\r\n\r\n    return findMessage;\r\n  }\r\n\r\n  async updateMessage(\r\n    memorialId: string,\r\n    _id: number,\r\n    userId: string,\r\n    messageDto: MessageDto\r\n  ) {\r\n    Logger.log(\r\n      '[MessagesService] updateMessage(' +\r\n        _id +\r\n        ') called with userId: {' +\r\n        userId +\r\n        '}'\r\n    );\r\n    Logger.log(messageDto);\r\n\r\n    const message = {\r\n      _id,\r\n      userId,\r\n      ...messageDto,\r\n    };\r\n\r\n    const memorial = await this.memorialModel.findById({\r\n      _id: new Types.ObjectId(memorialId),\r\n    });\r\n    if (!memorial)\r\n      throw new NotFoundException(\r\n        'Memorial with id: {' + memorialId + '} not found'\r\n      );\r\n\r\n    const index = memorial!.messages!.findIndex(\r\n      (message) => message._id == _id\r\n    );\r\n\r\n    if (index == -1)\r\n      throw new NotFoundException('Message with id: {' + _id + '} not found');\r\n\r\n    memorial!.messages![index] = message;\r\n\r\n    await memorial.save();\r\n\r\n    return message;\r\n  }\r\n\r\n  async removeMessageById(\r\n    memorialId: string,\r\n    _id: number\r\n  ): Promise<Message | null> {\r\n    Logger.log('[MessagesService] removeMessageById(' + _id + ') called');\r\n\r\n    const memorial = await this.memorialModel.findById({\r\n      _id: new Types.ObjectId(memorialId),\r\n    });\r\n    if (!memorial)\r\n      throw new NotFoundException(\r\n        'Memorial with id: {' + memorialId + '} not found'\r\n      );\r\n\r\n    const index = memorial!.messages!.findIndex(\r\n      (message) => message._id == _id\r\n    );\r\n\r\n    if (index == -1)\r\n      throw new NotFoundException('Message with id: {' + _id + '} not found');\r\n\r\n    memorial!.messages!.splice(index, 1);\r\n\r\n    await memorial.save();\r\n\r\n    return null;\r\n  }\r\n}\r\n","import {\r\n  IsBase64,\r\n  IsDateString,\r\n  IsIn,\r\n  IsNotEmpty,\r\n  IsString,\r\n} from 'class-validator';\r\nimport { Gender } from '../shared/gender.model';\r\n\r\nexport class PersonDto {\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  readonly name: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsDateString()\r\n  readonly birthday: Date | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsDateString()\r\n  readonly deathday: Date | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsIn(['male', 'female'])\r\n  readonly gender: Gender | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  @IsBase64()\r\n  readonly imageBase64: string | undefined;\r\n}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { Types } from 'mongoose';\r\nimport { Gender } from '../shared/gender.model';\r\n\r\nexport type PersonDocument = Person & Document;\r\n\r\n@Schema()\r\nexport class Person {\r\n  _id: string | undefined;\r\n\r\n  @Prop({ type: Types.ObjectId, ref: 'user' })\r\n  userId: string | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  name: string | undefined;\r\n\r\n  @Prop({ type: 'Date' })\r\n  birthday: Date | undefined;\r\n\r\n  @Prop({ type: 'Date' })\r\n  deathday: Date | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  gender: Gender | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  imageBase64: string | undefined;\r\n}\r\n\r\nexport const PersonSchema = SchemaFactory.createForClass(Person);\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { PersonSchema } from './person.model';\r\nimport { PersonsController } from './persons.controller';\r\nimport { PersonsService } from './persons.service';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forFeature([{ name: 'person', schema: PersonSchema }]),\r\n  ],\r\n  providers: [PersonsService],\r\n  controllers: [PersonsController],\r\n})\r\nexport class PersonModule {}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  Logger,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Res,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { Response } from 'express';\r\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\r\nimport { PersonDto } from './person.dto';\r\nimport { PersonsService } from './persons.service';\r\nimport { IGetUserAuthInfoReqeust } from '../shared/auth.inforequest.interface';\r\nimport { Person } from './person.model';\r\nimport { IdValidator } from '../shared/id.validator';\r\n\r\n@Controller('persons')\r\nexport class PersonsController {\r\n  constructor(private personsService: PersonsService) {}\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Post()\r\n  async addPerson(\r\n    @Body() personDto: PersonDto,\r\n    @Req() req: IGetUserAuthInfoReqeust,\r\n    @Res() res: Response\r\n  ) {\r\n    const requestId = req.user._id;\r\n    Logger.log(\r\n      '[PersonsController][POST]/persons called for userId: {' + requestId + '}'\r\n    );\r\n    Logger.log(personDto);\r\n\r\n    const person = await this.personsService.addPerson(personDto, requestId);\r\n\r\n    return res.status(201).json({\r\n      status: 200,\r\n      result: person,\r\n    });\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Get()\r\n  async getAllPersonsFromUser(\r\n    @Req() req: IGetUserAuthInfoReqeust,\r\n    @Res() res: Response\r\n  ) {\r\n    const requestId = req.user._id;\r\n    Logger.log(\r\n      '[PersonsController][GET]/persons called for userId: {' + requestId + '}'\r\n    );\r\n\r\n    const persons = await this.personsService.getAllPersonsFromUser(requestId);\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      result: persons,\r\n    });\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Get(':id')\r\n  async getPersonById(@Param('id') id: string, @Res() res: Response) {\r\n    Logger.log('[PersonsController][GET]/persons/' + id + ' called');\r\n\r\n    if (!IdValidator.validate(id)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Id must be a string of 12 bytes',\r\n      });\r\n    }\r\n\r\n    const person = await this.personsService.getPersonById(id);\r\n\r\n    if (!person) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Person with id: {' + id + '} not found',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      result: person,\r\n    });\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Put(':id')\r\n  async updatePerson(\r\n    @Param('id') id: string,\r\n    @Body() personDto: PersonDto,\r\n    @Req() req: IGetUserAuthInfoReqeust,\r\n    @Res() res: Response\r\n  ) {\r\n    Logger.log('[PersonsController][PUT]/persons/' + id + ' called');\r\n\r\n    if (!IdValidator.validate(id)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Id is not in a valid string format',\r\n      });\r\n    }\r\n\r\n    const findPerson = await this.personsService.getPersonById(id);\r\n    if (!findPerson) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Person with id: {' + id + '} not found',\r\n      });\r\n    }\r\n\r\n    const requestId = req.user._id;\r\n    if (requestId != findPerson.userId) {\r\n      return res.status(403).json({\r\n        status: 403,\r\n        error: \"You don't have permission to update this person\",\r\n      });\r\n    }\r\n\r\n    const person = await this.personsService.updatePerson(\r\n      id,\r\n      requestId,\r\n      personDto\r\n    );\r\n    return res.status(201).json({\r\n      status: 201,\r\n      result: person,\r\n    });\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Delete(':id')\r\n  async removePerson(\r\n    @Param('id') id: string,\r\n    @Req() req: IGetUserAuthInfoReqeust,\r\n    @Res() res: Response\r\n  ) {\r\n    Logger.log('[PersonsController][DELETE]/persons/' + id + ' called');\r\n\r\n    if (!IdValidator.validate(id)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Id is not in a valid string format',\r\n      });\r\n    }\r\n\r\n    const findPerson = await this.personsService.getPersonById(id);\r\n    if (!findPerson) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Person with id: {' + id + '} not found',\r\n      });\r\n    }\r\n\r\n    const requestId = req.user._id;\r\n    if (requestId != findPerson.userId) {\r\n      return res.status(403).json({\r\n        status: 403,\r\n        error: \"You don't have permission to delete this person\",\r\n      });\r\n    }\r\n\r\n    await this.personsService.removePersonById(id);\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'Person with id: {' + id + '} deleted',\r\n    });\r\n  }\r\n}\r\n","import { Injectable, Logger } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model, Types } from 'mongoose';\r\nimport { PersonDto } from './person.dto';\r\nimport { Person, PersonDocument } from './person.model';\r\n\r\n@Injectable()\r\nexport class PersonsService {\r\n  constructor(\r\n    @InjectModel('person') private readonly personModel: Model<PersonDocument>\r\n  ) {}\r\n\r\n  async addPerson(personDto: PersonDto, userId: string): Promise<Person> {\r\n    Logger.log(\r\n      '[PersonsService] addPerson called with userId: {' + userId + '}'\r\n    );\r\n    Logger.log(personDto);\r\n\r\n    const person = {\r\n      userId,\r\n      ...personDto,\r\n    };\r\n\r\n    return await this.personModel.create(person);\r\n  }\r\n\r\n  async getAllPersonsFromUser(userId: string): Promise<Person[]> {\r\n    Logger.log('[PersonsService] getAllPersonsFromUser(' + userId + ') called');\r\n\r\n    return await this.personModel.find({ userId: { $eq: userId } });\r\n  }\r\n\r\n  async getPersonById(_id: string): Promise<Person | null> {\r\n    Logger.log('[PersonsService] getPersonById(' + _id + ') called');\r\n\r\n    return await this.personModel.findById({ _id: new Types.ObjectId(_id) });\r\n  }\r\n\r\n  async updatePerson(\r\n    _id: string,\r\n    userId: string,\r\n    personDto: PersonDto\r\n  ): Promise<Person | null> {\r\n    Logger.log(\r\n      '[PersonsService] updatePerson(' +\r\n        _id +\r\n        ') called with userId: {' +\r\n        userId +\r\n        '}'\r\n    );\r\n    Logger.log(personDto);\r\n\r\n    const person = {\r\n      _id,\r\n      userId,\r\n      ...personDto,\r\n    };\r\n\r\n    return await this.personModel.findOneAndUpdate({ _id: _id }, person, {\r\n      new: true,\r\n    });\r\n  }\r\n\r\n  async removePersonById(_id: string): Promise<Person | null> {\r\n    Logger.log('[PersonsService] removePersonById(' + _id + ') called');\r\n\r\n    return await this.personModel.findOneAndDelete({ _id: _id });\r\n  }\r\n}\r\n","import { Request } from 'express';\r\n\r\nexport interface IGetUserAuthInfoReqeust extends Request {\r\n  user: {\r\n    _id: string;\r\n    email: string;\r\n  };\r\n}\r\n","import { isValidObjectId } from 'mongoose';\r\n\r\nexport class IdValidator {\r\n  public static validate(id: string): boolean {\r\n    return isValidObjectId(id);\r\n  }\r\n}\r\n","import { Gender } from '../shared/gender.model';\r\nimport {\r\n  IsNotEmpty,\r\n  IsEmail,\r\n  IsString,\r\n  IsDateString,\r\n  IsIn,\r\n} from 'class-validator';\r\n\r\nexport class UserDto {\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  readonly name: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsEmail()\r\n  readonly email: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  password: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  readonly phoneNumber: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  @IsDateString()\r\n  readonly birthday: Date | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsIn(['male', 'female'])\r\n  gender: Gender | undefined;\r\n}\r\n\r\nexport class UserLoginDto {\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  readonly email: string | undefined;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  readonly password: string | undefined;\r\n}\r\n","import { Gender } from '../shared/gender.model';\r\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { Document, Types } from 'mongoose';\r\n\r\nexport type UserDocument = User & Document;\r\n\r\n@Schema()\r\nexport class User {\r\n  _id: string | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  name: string | undefined;\r\n\r\n  @Prop({ type: 'string', unique: true })\r\n  email: string | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  password: string | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  phoneNumber: string | undefined;\r\n\r\n  @Prop({ type: 'Date' })\r\n  birthday: Date | undefined;\r\n\r\n  @Prop({ type: 'string' })\r\n  gender: Gender | undefined;\r\n}\r\n\r\nexport const UserSchema = SchemaFactory.createForClass(User);\r\n","import { Module } from '@nestjs/common';\r\nimport { UsersService } from './users.service';\r\nimport { UsersController } from './users.controller';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { UserSchema } from './user.model';\r\n\r\n@Module({\r\n  imports: [MongooseModule.forFeature([{ name: 'user', schema: UserSchema }])],\r\n  providers: [UsersService],\r\n  controllers: [UsersController],\r\n})\r\nexport class UsersModule {}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Get,\r\n  Logger,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Res,\r\n  UseGuards,\r\n  Req,\r\n  Delete,\r\n} from '@nestjs/common';\r\nimport { UsersService } from './users.service';\r\nimport { Response } from 'express';\r\nimport { UserDto } from './user.dto';\r\nimport * as bcrypt from 'bcrypt';\r\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\r\nimport { IGetUserAuthInfoReqeust } from '../shared/auth.inforequest.interface';\r\nimport { IdValidator } from '../shared/id.validator';\r\n\r\n@Controller('users')\r\nexport class UsersController {\r\n  constructor(private usersService: UsersService) {}\r\n\r\n  @Post()\r\n  async addUser(@Body() userDto: UserDto, @Res() res: Response) {\r\n    Logger.log('[UsersController][POST]/users called');\r\n    Logger.log(userDto);\r\n\r\n    const findUser = await this.usersService.getUserByEmail(userDto.email!);\r\n    if (findUser) {\r\n      return res.status(403).json({\r\n        status: 403,\r\n        error: 'The given email is already in use',\r\n      });\r\n    }\r\n\r\n    userDto.password = await this.hashPassword(userDto.password!);\r\n\r\n    const user = await this.usersService.addUser(userDto);\r\n    return res.status(201).json({\r\n      status: 201,\r\n      result: user,\r\n    });\r\n  }\r\n\r\n  @Get()\r\n  async getAllUsers(@Res() res: Response) {\r\n    Logger.log('[UsersController][GET]/users called');\r\n\r\n    const users = await this.usersService.getAllUsers();\r\n    return res.status(200).json({\r\n      status: 200,\r\n      result: users,\r\n    });\r\n  }\r\n\r\n  @Get(':id')\r\n  async getUserById(@Param('id') id: string, @Res() res: Response) {\r\n    Logger.log('[UsersController][GET]/users/' + id + ' called');\r\n\r\n    if (!IdValidator.validate(id)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Id is not in a valid string format',\r\n      });\r\n    }\r\n\r\n    const user = await this.usersService.getUserById(id);\r\n\r\n    if (!user) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'User with id {' + id + '} not found',\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      status: 200,\r\n      result: user,\r\n    });\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Put(':id')\r\n  async updateUser(\r\n    @Param('id') id: string,\r\n    @Body() userDto: UserDto,\r\n    @Req() req: IGetUserAuthInfoReqeust,\r\n    @Res() res: Response\r\n  ) {\r\n    Logger.log('[UsersController][PUT]/users/' + id + ' called');\r\n    Logger.log(userDto);\r\n\r\n    if (!IdValidator.validate(id)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Id is not in a valid string format',\r\n      });\r\n    }\r\n\r\n    const requestId = req.user._id;\r\n    Logger.log(requestId);\r\n    if (requestId != id) {\r\n      return res.status(403).json({\r\n        status: 403,\r\n        error: \"You don't have permission to update this user\",\r\n      });\r\n    }\r\n\r\n    if (req.user.email != userDto.email) {\r\n      const findUser = await this.usersService.getUserByEmail(userDto.email!);\r\n      if (findUser) {\r\n        return res.status(403).json({\r\n          status: 403,\r\n          error: 'The given email is already in use',\r\n        });\r\n      }\r\n    }\r\n\r\n    userDto.password = await this.hashPassword(userDto.password!);\r\n\r\n    const user = await this.usersService.updateUser(id, userDto);\r\n    return res.status(201).json({\r\n      status: 201,\r\n      result: user,\r\n    });\r\n  }\r\n\r\n  @UseGuards(JwtAuthGuard)\r\n  @Delete(':id')\r\n  async removeUser(\r\n    @Param('id') id: string,\r\n    @Req() req: IGetUserAuthInfoReqeust,\r\n    @Res() res: Response\r\n  ) {\r\n    Logger.log('[UsersController][DELETE]/users/' + id + ' called');\r\n\r\n    if (!IdValidator.validate(id)) {\r\n      return res.status(400).json({\r\n        status: 400,\r\n        error: 'Id is not in a valid string format',\r\n      });\r\n    }\r\n\r\n    const requestId = req.user._id;\r\n    if (requestId != id) {\r\n      return res.status(403).json({\r\n        status: 403,\r\n        error: \"You don't have permission to delete this user\",\r\n      });\r\n    }\r\n\r\n    const user = await this.usersService.getUserById(id);\r\n\r\n    if (!user) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'User with id {' + id + '} not found',\r\n      });\r\n    }\r\n\r\n    await this.usersService.removeUserById(id);\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'User with id {' + id + '} deleted',\r\n    });\r\n  }\r\n\r\n  async hashPassword(password: string): Promise<string> {\r\n    Logger.log('[UsersController] hashPassword(' + password + ') called');\r\n\r\n    const saltOrRounds = 10;\r\n    return await bcrypt.hash(password, saltOrRounds);\r\n  }\r\n}\r\n","import { Gender } from '../shared/gender.model';\r\nimport { UserDto } from './user.dto';\r\nimport { Injectable, Logger } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model, Types } from 'mongoose';\r\nimport { User, UserDocument } from './user.model';\r\n\r\n@Injectable()\r\nexport class UsersService {\r\n  constructor(\r\n    @InjectModel('user') private readonly userModel: Model<UserDocument>\r\n  ) {}\r\n\r\n  addUser(userDto: UserDto): Promise<User> {\r\n    Logger.log('[UsersService] addUser called');\r\n    Logger.log(userDto);\r\n\r\n    return this.userModel.create(userDto);\r\n  }\r\n\r\n  async getAllUsers(): Promise<User[]> {\r\n    Logger.log('[UsersSerivce] getAllUsers called');\r\n\r\n    return await this.userModel.find();\r\n  }\r\n\r\n  async getUserById(id: string): Promise<User | null> {\r\n    Logger.log('[UsersServices] getUserById(' + id + ') called');\r\n\r\n    return await this.userModel.findById({ _id: new Types.ObjectId(id) });\r\n  }\r\n\r\n  async getUserByEmail(email: string): Promise<User | null> {\r\n    Logger.log('[UsersServices] getUserByEmail(' + email + ') called');\r\n\r\n    return await this.userModel.findOne({ email: email });\r\n  }\r\n\r\n  async updateUser(_id: string, userDto: UserDto): Promise<User | null> {\r\n    Logger.log('[UsersServices] updateUser(' + _id + ') called');\r\n    Logger.log(userDto);\r\n\r\n    const user: User = {\r\n      _id,\r\n      ...userDto,\r\n    };\r\n\r\n    return await this.userModel.findOneAndUpdate({ _id: _id }, user, {\r\n      new: true,\r\n    });\r\n  }\r\n\r\n  // Validation of user existing happens in Controller\r\n  async removeUserById(_id: string): Promise<User | null> {\r\n    Logger.log('[UsersService] removeUserById(' + _id + '} called');\r\n\r\n    return await this.userModel.findOneAndDelete({ _id: _id });\r\n  }\r\n}\r\n","/**\r\n * This is not a production server yet!\r\n * This is only a minimal backend to get started.\r\n */\r\n\r\nimport { Logger, ValidationPipe } from '@nestjs/common';\r\nimport { NestFactory } from '@nestjs/core';\r\nimport * as session from 'express-session';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport * as bodyParser from 'body-parser';\r\nimport { config } from 'dotenv';\r\n\r\nconfig();\r\n\r\nasync function bootstrap() {\r\n  console.log(process.env);\r\n  const app = await NestFactory.create(AppModule);\r\n  const globalPrefix = 'api';\r\n  app.setGlobalPrefix(globalPrefix);\r\n  app.enableCors();\r\n  app.useGlobalPipes(new ValidationPipe());\r\n  app.use(\r\n    session({\r\n      secret: 'keyboard cat',\r\n      resave: false,\r\n      saveUninitialized: false,\r\n      cookie: { maxAge: 3600000 },\r\n    })\r\n  );\r\n  app.use(bodyParser.json({ limit: '10mb' }));\r\n  app.use(bodyParser.urlencoded({ limit: '10mb', extended: true }));\r\n\r\n  const port = process.env['PORT'] || 3333;\r\n  await app.listen(port);\r\n  Logger.log(\r\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\r\n  );\r\n}\r\n\r\nbootstrap();\r\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"bcrypt\");","module.exports = require(\"body-parser\");","module.exports = require(\"class-validator\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-session\");","module.exports = require(\"mongoose\");","module.exports = require(\"neo4j-driver\");","module.exports = require(\"passport-jwt\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./apps/api/src/main.ts\");\n",""],"names":[],"sourceRoot":""}